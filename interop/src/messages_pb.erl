%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.0.2
-module(messages_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_grpc.testing.PayloadType'/1, 'enum_value_by_symbol_grpc.testing.PayloadType'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'grpc.testing.PayloadType'() :: 'COMPRESSABLE'.
-export_type(['grpc.testing.PayloadType'/0]).

%% message types
-type 'grpc.testing.EchoStatus'() ::
      #{code                    => integer(),       % = 1, 32 bits
        message                 => iodata()         % = 2
       }.
-type 'grpc.testing.Payload'() ::
      #{type                    => 'COMPRESSABLE' | integer(), % = 1, enum grpc.testing.PayloadType
        body                    => binary()         % = 2
       }.
-type 'grpc.testing.BoolValue'() ::
      #{value                   => boolean() | 0 | 1 % = 1
       }.
-type 'grpc.testing.ResponseParameters'() ::
      #{size                    => integer(),       % = 1, 32 bits
        interval_us             => integer(),       % = 2, 32 bits
        compressed              => 'grpc.testing.BoolValue'() % = 3
       }.
-type 'grpc.testing.StreamingOutputCallRequest'() ::
      #{response_type           => 'COMPRESSABLE' | integer(), % = 1, enum grpc.testing.PayloadType
        response_parameters     => ['grpc.testing.ResponseParameters'()], % = 2
        payload                 => 'grpc.testing.Payload'(), % = 3
        response_status         => 'grpc.testing.EchoStatus'() % = 7
       }.
-type 'grpc.testing.StreamingInputCallResponse'() ::
      #{aggregated_payload_size => integer()        % = 1, 32 bits
       }.
-type 'grpc.testing.SimpleResponse'() ::
      #{payload                 => 'grpc.testing.Payload'(), % = 1
        username                => iodata(),        % = 2
        oauth_scope             => iodata()         % = 3
       }.
-type 'grpc.testing.StreamingInputCallRequest'() ::
      #{payload                 => 'grpc.testing.Payload'(), % = 1
        expect_compressed       => 'grpc.testing.BoolValue'() % = 2
       }.
-type 'grpc.testing.SimpleRequest'() ::
      #{response_type           => 'COMPRESSABLE' | integer(), % = 1, enum grpc.testing.PayloadType
        response_size           => integer(),       % = 2, 32 bits
        payload                 => 'grpc.testing.Payload'(), % = 3
        fill_username           => boolean() | 0 | 1, % = 4
        fill_oauth_scope        => boolean() | 0 | 1, % = 5
        response_compressed     => 'grpc.testing.BoolValue'(), % = 6
        response_status         => 'grpc.testing.EchoStatus'(), % = 7
        expect_compressed       => 'grpc.testing.BoolValue'() % = 8
       }.
-type 'grpc.testing.ReconnectInfo'() ::
      #{passed                  => boolean() | 0 | 1, % = 1
        backoff_ms              => [integer()]      % = 2, 32 bits
       }.
-type 'grpc.testing.StreamingOutputCallResponse'() ::
      #{payload                 => 'grpc.testing.Payload'() % = 1
       }.
-type 'grpc.testing.ReconnectParams'() ::
      #{max_reconnect_backoff_ms => integer()       % = 1, 32 bits
       }.
-export_type(['grpc.testing.EchoStatus'/0, 'grpc.testing.Payload'/0, 'grpc.testing.BoolValue'/0, 'grpc.testing.ResponseParameters'/0, 'grpc.testing.StreamingOutputCallRequest'/0, 'grpc.testing.StreamingInputCallResponse'/0, 'grpc.testing.SimpleResponse'/0, 'grpc.testing.StreamingInputCallRequest'/0, 'grpc.testing.SimpleRequest'/0, 'grpc.testing.ReconnectInfo'/0, 'grpc.testing.StreamingOutputCallResponse'/0, 'grpc.testing.ReconnectParams'/0]).

-spec encode_msg('grpc.testing.EchoStatus'() | 'grpc.testing.Payload'() | 'grpc.testing.BoolValue'() | 'grpc.testing.ResponseParameters'() | 'grpc.testing.StreamingOutputCallRequest'() | 'grpc.testing.StreamingInputCallResponse'() | 'grpc.testing.SimpleResponse'() | 'grpc.testing.StreamingInputCallRequest'() | 'grpc.testing.SimpleRequest'() | 'grpc.testing.ReconnectInfo'() | 'grpc.testing.StreamingOutputCallResponse'() | 'grpc.testing.ReconnectParams'(),'grpc.testing.EchoStatus' | 'grpc.testing.Payload' | 'grpc.testing.BoolValue' | 'grpc.testing.ResponseParameters' | 'grpc.testing.StreamingOutputCallRequest' | 'grpc.testing.StreamingInputCallResponse' | 'grpc.testing.SimpleResponse' | 'grpc.testing.StreamingInputCallRequest' | 'grpc.testing.SimpleRequest' | 'grpc.testing.ReconnectInfo' | 'grpc.testing.StreamingOutputCallResponse' | 'grpc.testing.ReconnectParams') -> binary().
encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


-spec encode_msg('grpc.testing.EchoStatus'() | 'grpc.testing.Payload'() | 'grpc.testing.BoolValue'() | 'grpc.testing.ResponseParameters'() | 'grpc.testing.StreamingOutputCallRequest'() | 'grpc.testing.StreamingInputCallResponse'() | 'grpc.testing.SimpleResponse'() | 'grpc.testing.StreamingInputCallRequest'() | 'grpc.testing.SimpleRequest'() | 'grpc.testing.ReconnectInfo'() | 'grpc.testing.StreamingOutputCallResponse'() | 'grpc.testing.ReconnectParams'(),'grpc.testing.EchoStatus' | 'grpc.testing.Payload' | 'grpc.testing.BoolValue' | 'grpc.testing.ResponseParameters' | 'grpc.testing.StreamingOutputCallRequest' | 'grpc.testing.StreamingInputCallResponse' | 'grpc.testing.SimpleResponse' | 'grpc.testing.StreamingInputCallRequest' | 'grpc.testing.SimpleRequest' | 'grpc.testing.ReconnectInfo' | 'grpc.testing.StreamingOutputCallResponse' | 'grpc.testing.ReconnectParams', list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'grpc.testing.EchoStatus' ->
	  'e_msg_grpc.testing.EchoStatus'(Msg, TrUserData);
      'grpc.testing.Payload' ->
	  'e_msg_grpc.testing.Payload'(Msg, TrUserData);
      'grpc.testing.BoolValue' ->
	  'e_msg_grpc.testing.BoolValue'(Msg, TrUserData);
      'grpc.testing.ResponseParameters' ->
	  'e_msg_grpc.testing.ResponseParameters'(Msg,
						  TrUserData);
      'grpc.testing.StreamingOutputCallRequest' ->
	  'e_msg_grpc.testing.StreamingOutputCallRequest'(Msg,
							  TrUserData);
      'grpc.testing.StreamingInputCallResponse' ->
	  'e_msg_grpc.testing.StreamingInputCallResponse'(Msg,
							  TrUserData);
      'grpc.testing.SimpleResponse' ->
	  'e_msg_grpc.testing.SimpleResponse'(Msg, TrUserData);
      'grpc.testing.StreamingInputCallRequest' ->
	  'e_msg_grpc.testing.StreamingInputCallRequest'(Msg,
							 TrUserData);
      'grpc.testing.SimpleRequest' ->
	  'e_msg_grpc.testing.SimpleRequest'(Msg, TrUserData);
      'grpc.testing.ReconnectInfo' ->
	  'e_msg_grpc.testing.ReconnectInfo'(Msg, TrUserData);
      'grpc.testing.StreamingOutputCallResponse' ->
	  'e_msg_grpc.testing.StreamingOutputCallResponse'(Msg,
							   TrUserData);
      'grpc.testing.ReconnectParams' ->
	  'e_msg_grpc.testing.ReconnectParams'(Msg, TrUserData)
    end.



'e_msg_grpc.testing.EchoStatus'(Msg, TrUserData) ->
    'e_msg_grpc.testing.EchoStatus'(Msg, <<>>, TrUserData).


'e_msg_grpc.testing.EchoStatus'(#{} = M, Bin,
				TrUserData) ->
    B1 = case M of
	   #{code := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{message := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false -> e_type_string(TrF2, <<B1/binary, 18>>)
	    end
	  end;
      _ -> B1
    end.

'e_msg_grpc.testing.Payload'(Msg, TrUserData) ->
    'e_msg_grpc.testing.Payload'(Msg, <<>>, TrUserData).


'e_msg_grpc.testing.Payload'(#{} = M, Bin,
			     TrUserData) ->
    B1 = case M of
	   #{type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 'COMPRESSABLE' -> Bin;
		    true ->
			'e_enum_grpc.testing.PayloadType'(TrF1,
							  <<Bin/binary, 8>>)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{body := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case iolist_size(TrF2) of
	      0 -> B1;
	      _ -> e_type_bytes(TrF2, <<B1/binary, 18>>)
	    end
	  end;
      _ -> B1
    end.

'e_msg_grpc.testing.BoolValue'(Msg, TrUserData) ->
    'e_msg_grpc.testing.BoolValue'(Msg, <<>>, TrUserData).


'e_msg_grpc.testing.BoolValue'(#{} = M, Bin,
			       TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= false -> Bin;
	       true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
	    end
	  end;
      _ -> Bin
    end.

'e_msg_grpc.testing.ResponseParameters'(Msg,
					TrUserData) ->
    'e_msg_grpc.testing.ResponseParameters'(Msg, <<>>,
					    TrUserData).


'e_msg_grpc.testing.ResponseParameters'(#{} = M, Bin,
					TrUserData) ->
    B1 = case M of
	   #{size := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{interval_us := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_type_int32(TrF2, <<B1/binary, 16>>)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{compressed := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= undefined -> B2;
	       true ->
		   'e_mfield_grpc.testing.ResponseParameters_compressed'(TrF3,
									 <<B2/binary,
									   26>>,
									 TrUserData)
	    end
	  end;
      _ -> B2
    end.

'e_msg_grpc.testing.StreamingOutputCallRequest'(Msg,
						TrUserData) ->
    'e_msg_grpc.testing.StreamingOutputCallRequest'(Msg,
						    <<>>, TrUserData).


'e_msg_grpc.testing.StreamingOutputCallRequest'(#{} = M,
						Bin, TrUserData) ->
    B1 = case M of
	   #{response_type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 'COMPRESSABLE' -> Bin;
		    true ->
			'e_enum_grpc.testing.PayloadType'(TrF1,
							  <<Bin/binary, 8>>)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{response_parameters := F2} ->
	       TrF2 = id(F2, TrUserData),
	       if TrF2 == [] -> B1;
		  true ->
		      'e_field_grpc.testing.StreamingOutputCallRequest_response_parameters'(TrF2,
											    B1,
											    TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{payload := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= undefined -> B2;
		    true ->
			'e_mfield_grpc.testing.StreamingOutputCallRequest_payload'(TrF3,
										   <<B2/binary,
										     26>>,
										   TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{response_status := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    if TrF4 =:= undefined -> B3;
	       true ->
		   'e_mfield_grpc.testing.StreamingOutputCallRequest_response_status'(TrF4,
										      <<B3/binary,
											58>>,
										      TrUserData)
	    end
	  end;
      _ -> B3
    end.

'e_msg_grpc.testing.StreamingInputCallResponse'(Msg,
						TrUserData) ->
    'e_msg_grpc.testing.StreamingInputCallResponse'(Msg,
						    <<>>, TrUserData).


'e_msg_grpc.testing.StreamingInputCallResponse'(#{} = M,
						Bin, TrUserData) ->
    case M of
      #{aggregated_payload_size := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
	    end
	  end;
      _ -> Bin
    end.

'e_msg_grpc.testing.SimpleResponse'(Msg, TrUserData) ->
    'e_msg_grpc.testing.SimpleResponse'(Msg, <<>>,
					TrUserData).


'e_msg_grpc.testing.SimpleResponse'(#{} = M, Bin,
				    TrUserData) ->
    B1 = case M of
	   #{payload := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			'e_mfield_grpc.testing.SimpleResponse_payload'(TrF1,
								       <<Bin/binary,
									 10>>,
								       TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{username := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false -> e_type_string(TrF2, <<B1/binary, 18>>)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{oauth_scope := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    case is_empty_string(TrF3) of
	      true -> B2;
	      false -> e_type_string(TrF3, <<B2/binary, 26>>)
	    end
	  end;
      _ -> B2
    end.

'e_msg_grpc.testing.StreamingInputCallRequest'(Msg,
					       TrUserData) ->
    'e_msg_grpc.testing.StreamingInputCallRequest'(Msg,
						   <<>>, TrUserData).


'e_msg_grpc.testing.StreamingInputCallRequest'(#{} = M,
					       Bin, TrUserData) ->
    B1 = case M of
	   #{payload := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			'e_mfield_grpc.testing.StreamingInputCallRequest_payload'(TrF1,
										  <<Bin/binary,
										    10>>,
										  TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{expect_compressed := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   'e_mfield_grpc.testing.StreamingInputCallRequest_expect_compressed'(TrF2,
										       <<B1/binary,
											 18>>,
										       TrUserData)
	    end
	  end;
      _ -> B1
    end.

'e_msg_grpc.testing.SimpleRequest'(Msg, TrUserData) ->
    'e_msg_grpc.testing.SimpleRequest'(Msg, <<>>,
				       TrUserData).


'e_msg_grpc.testing.SimpleRequest'(#{} = M, Bin,
				   TrUserData) ->
    B1 = case M of
	   #{response_type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 'COMPRESSABLE' -> Bin;
		    true ->
			'e_enum_grpc.testing.PayloadType'(TrF1,
							  <<Bin/binary, 8>>)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{response_size := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_type_int32(TrF2, <<B1/binary, 16>>)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{payload := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= undefined -> B2;
		    true ->
			'e_mfield_grpc.testing.SimpleRequest_payload'(TrF3,
								      <<B2/binary,
									26>>,
								      TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{fill_username := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= false -> B3;
		    true -> e_type_bool(TrF4, <<B3/binary, 32>>)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{fill_oauth_scope := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= false -> B4;
		    true -> e_type_bool(TrF5, <<B4/binary, 40>>)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{response_compressed := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= undefined -> B5;
		    true ->
			'e_mfield_grpc.testing.SimpleRequest_response_compressed'(TrF6,
										  <<B5/binary,
										    50>>,
										  TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{response_status := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 if TrF7 =:= undefined -> B6;
		    true ->
			'e_mfield_grpc.testing.SimpleRequest_response_status'(TrF7,
									      <<B6/binary,
										58>>,
									      TrUserData)
		 end
	       end;
	   _ -> B6
	 end,
    case M of
      #{expect_compressed := F8} ->
	  begin
	    TrF8 = id(F8, TrUserData),
	    if TrF8 =:= undefined -> B7;
	       true ->
		   'e_mfield_grpc.testing.SimpleRequest_expect_compressed'(TrF8,
									   <<B7/binary,
									     66>>,
									   TrUserData)
	    end
	  end;
      _ -> B7
    end.

'e_msg_grpc.testing.ReconnectInfo'(Msg, TrUserData) ->
    'e_msg_grpc.testing.ReconnectInfo'(Msg, <<>>,
				       TrUserData).


'e_msg_grpc.testing.ReconnectInfo'(#{} = M, Bin,
				   TrUserData) ->
    B1 = case M of
	   #{passed := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= false -> Bin;
		    true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{backoff_ms := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 'e_field_grpc.testing.ReconnectInfo_backoff_ms'(TrF2,
								 B1, TrUserData)
	  end;
      _ -> B1
    end.

'e_msg_grpc.testing.StreamingOutputCallResponse'(Msg,
						 TrUserData) ->
    'e_msg_grpc.testing.StreamingOutputCallResponse'(Msg,
						     <<>>, TrUserData).


'e_msg_grpc.testing.StreamingOutputCallResponse'(#{} =
						     M,
						 Bin, TrUserData) ->
    case M of
      #{payload := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   'e_mfield_grpc.testing.StreamingOutputCallResponse_payload'(TrF1,
									       <<Bin/binary,
										 10>>,
									       TrUserData)
	    end
	  end;
      _ -> Bin
    end.

'e_msg_grpc.testing.ReconnectParams'(Msg, TrUserData) ->
    'e_msg_grpc.testing.ReconnectParams'(Msg, <<>>,
					 TrUserData).


'e_msg_grpc.testing.ReconnectParams'(#{} = M, Bin,
				     TrUserData) ->
    case M of
      #{max_reconnect_backoff_ms := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
	    end
	  end;
      _ -> Bin
    end.

'e_mfield_grpc.testing.ResponseParameters_compressed'(Msg,
						      Bin, TrUserData) ->
    SubBin = 'e_msg_grpc.testing.BoolValue'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.testing.StreamingOutputCallRequest_response_parameters'(Msg,
								       Bin,
								       TrUserData) ->
    SubBin = 'e_msg_grpc.testing.ResponseParameters'(Msg,
						     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_grpc.testing.StreamingOutputCallRequest_response_parameters'([Elem
								       | Rest],
								      Bin,
								      TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_grpc.testing.StreamingOutputCallRequest_response_parameters'(id(Elem,
										  TrUserData),
									       Bin2,
									       TrUserData),
    'e_field_grpc.testing.StreamingOutputCallRequest_response_parameters'(Rest,
									  Bin3,
									  TrUserData);
'e_field_grpc.testing.StreamingOutputCallRequest_response_parameters'([],
								      Bin,
								      _TrUserData) ->
    Bin.

'e_mfield_grpc.testing.StreamingOutputCallRequest_payload'(Msg,
							   Bin, TrUserData) ->
    SubBin = 'e_msg_grpc.testing.Payload'(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.testing.StreamingOutputCallRequest_response_status'(Msg,
								   Bin,
								   TrUserData) ->
    SubBin = 'e_msg_grpc.testing.EchoStatus'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.testing.SimpleResponse_payload'(Msg, Bin,
					       TrUserData) ->
    SubBin = 'e_msg_grpc.testing.Payload'(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.testing.StreamingInputCallRequest_payload'(Msg,
							  Bin, TrUserData) ->
    SubBin = 'e_msg_grpc.testing.Payload'(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.testing.StreamingInputCallRequest_expect_compressed'(Msg,
								    Bin,
								    TrUserData) ->
    SubBin = 'e_msg_grpc.testing.BoolValue'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.testing.SimpleRequest_payload'(Msg, Bin,
					      TrUserData) ->
    SubBin = 'e_msg_grpc.testing.Payload'(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.testing.SimpleRequest_response_compressed'(Msg,
							  Bin, TrUserData) ->
    SubBin = 'e_msg_grpc.testing.BoolValue'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.testing.SimpleRequest_response_status'(Msg,
						      Bin, TrUserData) ->
    SubBin = 'e_msg_grpc.testing.EchoStatus'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_grpc.testing.SimpleRequest_expect_compressed'(Msg,
							Bin, TrUserData) ->
    SubBin = 'e_msg_grpc.testing.BoolValue'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_grpc.testing.ReconnectInfo_backoff_ms'(Elems,
						Bin, TrUserData)
    when Elems =/= [] ->
    SubBin =
	'e_pfield_grpc.testing.ReconnectInfo_backoff_ms'(Elems,
							 <<>>, TrUserData),
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
'e_field_grpc.testing.ReconnectInfo_backoff_ms'([], Bin,
						_TrUserData) ->
    Bin.

'e_pfield_grpc.testing.ReconnectInfo_backoff_ms'([Value
						  | Rest],
						 Bin, TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData), Bin),
    'e_pfield_grpc.testing.ReconnectInfo_backoff_ms'(Rest,
						     Bin2, TrUserData);
'e_pfield_grpc.testing.ReconnectInfo_backoff_ms'([],
						 Bin, _TrUserData) ->
    Bin.

'e_mfield_grpc.testing.StreamingOutputCallResponse_payload'(Msg,
							    Bin, TrUserData) ->
    SubBin = 'e_msg_grpc.testing.Payload'(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_grpc.testing.PayloadType'('COMPRESSABLE',
				  Bin) ->
    <<Bin/binary, 0>>;
'e_enum_grpc.testing.PayloadType'(V, Bin) ->
    e_varint(V, Bin).

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'grpc.testing.EchoStatus' ->
	  try 'd_msg_grpc.testing.EchoStatus'(Bin, TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'grpc.testing.EchoStatus',
			 {Class, Reason, StackTrace}}}})
	  end;
      'grpc.testing.Payload' ->
	  try 'd_msg_grpc.testing.Payload'(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'grpc.testing.Payload',
			 {Class, Reason, StackTrace}}}})
	  end;
      'grpc.testing.BoolValue' ->
	  try 'd_msg_grpc.testing.BoolValue'(Bin, TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'grpc.testing.BoolValue',
			 {Class, Reason, StackTrace}}}})
	  end;
      'grpc.testing.ResponseParameters' ->
	  try 'd_msg_grpc.testing.ResponseParameters'(Bin,
						      TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'grpc.testing.ResponseParameters',
			 {Class, Reason, StackTrace}}}})
	  end;
      'grpc.testing.StreamingOutputCallRequest' ->
	  try 'd_msg_grpc.testing.StreamingOutputCallRequest'(Bin,
							      TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'grpc.testing.StreamingOutputCallRequest',
			 {Class, Reason, StackTrace}}}})
	  end;
      'grpc.testing.StreamingInputCallResponse' ->
	  try 'd_msg_grpc.testing.StreamingInputCallResponse'(Bin,
							      TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'grpc.testing.StreamingInputCallResponse',
			 {Class, Reason, StackTrace}}}})
	  end;
      'grpc.testing.SimpleResponse' ->
	  try 'd_msg_grpc.testing.SimpleResponse'(Bin, TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'grpc.testing.SimpleResponse',
			 {Class, Reason, StackTrace}}}})
	  end;
      'grpc.testing.StreamingInputCallRequest' ->
	  try 'd_msg_grpc.testing.StreamingInputCallRequest'(Bin,
							     TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'grpc.testing.StreamingInputCallRequest',
			 {Class, Reason, StackTrace}}}})
	  end;
      'grpc.testing.SimpleRequest' ->
	  try 'd_msg_grpc.testing.SimpleRequest'(Bin, TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'grpc.testing.SimpleRequest',
			 {Class, Reason, StackTrace}}}})
	  end;
      'grpc.testing.ReconnectInfo' ->
	  try 'd_msg_grpc.testing.ReconnectInfo'(Bin, TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'grpc.testing.ReconnectInfo',
			 {Class, Reason, StackTrace}}}})
	  end;
      'grpc.testing.StreamingOutputCallResponse' ->
	  try
	    'd_msg_grpc.testing.StreamingOutputCallResponse'(Bin,
							     TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'grpc.testing.StreamingOutputCallResponse',
			 {Class, Reason, StackTrace}}}})
	  end;
      'grpc.testing.ReconnectParams' ->
	  try 'd_msg_grpc.testing.ReconnectParams'(Bin,
						   TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'grpc.testing.ReconnectParams',
			 {Class, Reason, StackTrace}}}})
	  end
    end.



'd_msg_grpc.testing.EchoStatus'(Bin, TrUserData) ->
    'dfp_read_field_def_grpc.testing.EchoStatus'(Bin, 0, 0,
						 id(0, TrUserData),
						 id(<<>>, TrUserData),
						 TrUserData).

'dfp_read_field_def_grpc.testing.EchoStatus'(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_grpc.testing.EchoStatus_code'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.testing.EchoStatus'(<<18,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_grpc.testing.EchoStatus_message'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.testing.EchoStatus'(<<>>, 0, 0,
					     F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{code => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{message => F@_2}
    end;
'dfp_read_field_def_grpc.testing.EchoStatus'(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_grpc.testing.EchoStatus'(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

'dg_read_field_def_grpc.testing.EchoStatus'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_grpc.testing.EchoStatus'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
'dg_read_field_def_grpc.testing.EchoStatus'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_grpc.testing.EchoStatus_code'(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      18 ->
	  'd_field_grpc.testing.EchoStatus_message'(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_grpc.testing.EchoStatus'(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		'skip_64_grpc.testing.EchoStatus'(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_grpc.testing.EchoStatus'(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		'skip_group_grpc.testing.EchoStatus'(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_grpc.testing.EchoStatus'(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_grpc.testing.EchoStatus'(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{code => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{message => F@_2}
    end.

'd_field_grpc.testing.EchoStatus_code'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.EchoStatus_code'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
'd_field_grpc.testing.EchoStatus_code'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'dfp_read_field_def_grpc.testing.EchoStatus'(RestF, 0,
						 0, NewFValue, F@_2,
						 TrUserData).

'd_field_grpc.testing.EchoStatus_message'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.EchoStatus_message'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
'd_field_grpc.testing.EchoStatus_message'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.EchoStatus'(RestF, 0,
						 0, F@_1, NewFValue,
						 TrUserData).

'skip_varint_grpc.testing.EchoStatus'(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_grpc.testing.EchoStatus'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
'skip_varint_grpc.testing.EchoStatus'(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_grpc.testing.EchoStatus'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

'skip_length_delimited_grpc.testing.EchoStatus'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_grpc.testing.EchoStatus'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
'skip_length_delimited_grpc.testing.EchoStatus'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.testing.EchoStatus'(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

'skip_group_grpc.testing.EchoStatus'(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.testing.EchoStatus'(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

'skip_32_grpc.testing.EchoStatus'(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_grpc.testing.EchoStatus'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

'skip_64_grpc.testing.EchoStatus'(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_grpc.testing.EchoStatus'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

'd_msg_grpc.testing.Payload'(Bin, TrUserData) ->
    'dfp_read_field_def_grpc.testing.Payload'(Bin, 0, 0,
					      id('COMPRESSABLE', TrUserData),
					      id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_grpc.testing.Payload'(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_grpc.testing.Payload_type'(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
'dfp_read_field_def_grpc.testing.Payload'(<<18,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_grpc.testing.Payload_body'(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
'dfp_read_field_def_grpc.testing.Payload'(<<>>, 0, 0,
					  F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{type => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{body => F@_2}
    end;
'dfp_read_field_def_grpc.testing.Payload'(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_grpc.testing.Payload'(Other, Z1, Z2,
					     F@_1, F@_2, TrUserData).

'dg_read_field_def_grpc.testing.Payload'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_grpc.testing.Payload'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'dg_read_field_def_grpc.testing.Payload'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_grpc.testing.Payload_type'(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      18 ->
	  'd_field_grpc.testing.Payload_body'(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_grpc.testing.Payload'(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    1 ->
		'skip_64_grpc.testing.Payload'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    2 ->
		'skip_length_delimited_grpc.testing.Payload'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    3 ->
		'skip_group_grpc.testing.Payload'(Rest, Key bsr 3, 0,
						  F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_grpc.testing.Payload'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData)
	  end
    end;
'dg_read_field_def_grpc.testing.Payload'(<<>>, 0, 0,
					 F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{type => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{body => F@_2}
    end.

'd_field_grpc.testing.Payload_type'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.Payload_type'(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_grpc.testing.Payload_type'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
	{'d_enum_grpc.testing.PayloadType'(begin
					     <<Res:32/signed-native>> = <<(X bsl
									     N
									     +
									     Acc):32/unsigned-native>>,
					     Res
					   end),
	 Rest},
    'dfp_read_field_def_grpc.testing.Payload'(RestF, 0, 0,
					      NewFValue, F@_2, TrUserData).

'd_field_grpc.testing.Payload_body'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.Payload_body'(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_grpc.testing.Payload_body'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.Payload'(RestF, 0, 0,
					      F@_1, NewFValue, TrUserData).

'skip_varint_grpc.testing.Payload'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_grpc.testing.Payload'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
'skip_varint_grpc.testing.Payload'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_grpc.testing.Payload'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

'skip_length_delimited_grpc.testing.Payload'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_grpc.testing.Payload'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
'skip_length_delimited_grpc.testing.Payload'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.testing.Payload'(Rest2, 0, 0,
					      F@_1, F@_2, TrUserData).

'skip_group_grpc.testing.Payload'(Bin, FNum, Z2, F@_1,
				  F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.testing.Payload'(Rest, 0, Z2,
					      F@_1, F@_2, TrUserData).

'skip_32_grpc.testing.Payload'(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_grpc.testing.Payload'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

'skip_64_grpc.testing.Payload'(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_grpc.testing.Payload'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

'd_msg_grpc.testing.BoolValue'(Bin, TrUserData) ->
    'dfp_read_field_def_grpc.testing.BoolValue'(Bin, 0, 0,
						id(false, TrUserData),
						TrUserData).

'dfp_read_field_def_grpc.testing.BoolValue'(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    'd_field_grpc.testing.BoolValue_value'(Rest, Z1, Z2,
					   F@_1, TrUserData);
'dfp_read_field_def_grpc.testing.BoolValue'(<<>>, 0, 0,
					    F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{value => F@_1}
    end;
'dfp_read_field_def_grpc.testing.BoolValue'(Other, Z1,
					    Z2, F@_1, TrUserData) ->
    'dg_read_field_def_grpc.testing.BoolValue'(Other, Z1,
					       Z2, F@_1, TrUserData).

'dg_read_field_def_grpc.testing.BoolValue'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_grpc.testing.BoolValue'(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
'dg_read_field_def_grpc.testing.BoolValue'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_grpc.testing.BoolValue_value'(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_grpc.testing.BoolValue'(Rest, 0, 0, F@_1,
						     TrUserData);
	    1 ->
		'skip_64_grpc.testing.BoolValue'(Rest, 0, 0, F@_1,
						 TrUserData);
	    2 ->
		'skip_length_delimited_grpc.testing.BoolValue'(Rest, 0,
							       0, F@_1,
							       TrUserData);
	    3 ->
		'skip_group_grpc.testing.BoolValue'(Rest, Key bsr 3, 0,
						    F@_1, TrUserData);
	    5 ->
		'skip_32_grpc.testing.BoolValue'(Rest, 0, 0, F@_1,
						 TrUserData)
	  end
    end;
'dg_read_field_def_grpc.testing.BoolValue'(<<>>, 0, 0,
					   F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{value => F@_1}
    end.

'd_field_grpc.testing.BoolValue_value'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.BoolValue_value'(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
'd_field_grpc.testing.BoolValue_value'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc =/= 0, Rest},
    'dfp_read_field_def_grpc.testing.BoolValue'(RestF, 0, 0,
						NewFValue, TrUserData).

'skip_varint_grpc.testing.BoolValue'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_grpc.testing.BoolValue'(Rest, Z1, Z2, F@_1,
					 TrUserData);
'skip_varint_grpc.testing.BoolValue'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_grpc.testing.BoolValue'(Rest, Z1,
						Z2, F@_1, TrUserData).

'skip_length_delimited_grpc.testing.BoolValue'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_grpc.testing.BoolValue'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
'skip_length_delimited_grpc.testing.BoolValue'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.testing.BoolValue'(Rest2, 0, 0,
						F@_1, TrUserData).

'skip_group_grpc.testing.BoolValue'(Bin, FNum, Z2, F@_1,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.testing.BoolValue'(Rest, 0, Z2,
						F@_1, TrUserData).

'skip_32_grpc.testing.BoolValue'(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_grpc.testing.BoolValue'(Rest, Z1,
						Z2, F@_1, TrUserData).

'skip_64_grpc.testing.BoolValue'(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_grpc.testing.BoolValue'(Rest, Z1,
						Z2, F@_1, TrUserData).

'd_msg_grpc.testing.ResponseParameters'(Bin,
					TrUserData) ->
    'dfp_read_field_def_grpc.testing.ResponseParameters'(Bin,
							 0, 0,
							 id(0, TrUserData),
							 id(0, TrUserData),
							 id(undefined,
							    TrUserData),
							 TrUserData).

'dfp_read_field_def_grpc.testing.ResponseParameters'(<<8,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'd_field_grpc.testing.ResponseParameters_size'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData);
'dfp_read_field_def_grpc.testing.ResponseParameters'(<<16,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'd_field_grpc.testing.ResponseParameters_interval_us'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, TrUserData);
'dfp_read_field_def_grpc.testing.ResponseParameters'(<<26,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'd_field_grpc.testing.ResponseParameters_compressed'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData);
'dfp_read_field_def_grpc.testing.ResponseParameters'(<<>>,
						     0, 0, F@_1, F@_2, F@_3,
						     _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{size => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{interval_us => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{compressed => F@_3}
    end;
'dfp_read_field_def_grpc.testing.ResponseParameters'(Other,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'dg_read_field_def_grpc.testing.ResponseParameters'(Other,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData).

'dg_read_field_def_grpc.testing.ResponseParameters'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_grpc.testing.ResponseParameters'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
'dg_read_field_def_grpc.testing.ResponseParameters'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_grpc.testing.ResponseParameters_size'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 TrUserData);
      16 ->
	  'd_field_grpc.testing.ResponseParameters_interval_us'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								TrUserData);
      26 ->
	  'd_field_grpc.testing.ResponseParameters_compressed'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_grpc.testing.ResponseParameters'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, TrUserData);
	    1 ->
		'skip_64_grpc.testing.ResponseParameters'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    2 ->
		'skip_length_delimited_grpc.testing.ResponseParameters'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									TrUserData);
	    3 ->
		'skip_group_grpc.testing.ResponseParameters'(Rest,
							     Key bsr 3, 0, F@_1,
							     F@_2, F@_3,
							     TrUserData);
	    5 ->
		'skip_32_grpc.testing.ResponseParameters'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData)
	  end
    end;
'dg_read_field_def_grpc.testing.ResponseParameters'(<<>>,
						    0, 0, F@_1, F@_2, F@_3,
						    _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{size => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{interval_us => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{compressed => F@_3}
    end.

'd_field_grpc.testing.ResponseParameters_size'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.ResponseParameters_size'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'd_field_grpc.testing.ResponseParameters_size'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, F@_2, F@_3,
					       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'dfp_read_field_def_grpc.testing.ResponseParameters'(RestF,
							 0, 0, NewFValue, F@_2,
							 F@_3, TrUserData).

'd_field_grpc.testing.ResponseParameters_interval_us'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.ResponseParameters_interval_us'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  TrUserData);
'd_field_grpc.testing.ResponseParameters_interval_us'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, _, F@_3,
						      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'dfp_read_field_def_grpc.testing.ResponseParameters'(RestF,
							 0, 0, F@_1, NewFValue,
							 F@_3, TrUserData).

'd_field_grpc.testing.ResponseParameters_compressed'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.ResponseParameters_compressed'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3,
							 TrUserData);
'd_field_grpc.testing.ResponseParameters_compressed'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, Prev,
						     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_grpc.testing.BoolValue'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.ResponseParameters'(RestF,
							 0, 0, F@_1, F@_2,
							 if Prev == '$undef' ->
								NewFValue;
							    true ->
								'merge_msg_grpc.testing.BoolValue'(Prev,
												   NewFValue,
												   TrUserData)
							 end,
							 TrUserData).

'skip_varint_grpc.testing.ResponseParameters'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    'skip_varint_grpc.testing.ResponseParameters'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData);
'skip_varint_grpc.testing.ResponseParameters'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    'dfp_read_field_def_grpc.testing.ResponseParameters'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'skip_length_delimited_grpc.testing.ResponseParameters'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, TrUserData)
    when N < 57 ->
    'skip_length_delimited_grpc.testing.ResponseParameters'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3,
							    TrUserData);
'skip_length_delimited_grpc.testing.ResponseParameters'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.testing.ResponseParameters'(Rest2,
							 0, 0, F@_1, F@_2, F@_3,
							 TrUserData).

'skip_group_grpc.testing.ResponseParameters'(Bin, FNum,
					     Z2, F@_1, F@_2, F@_3,
					     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.testing.ResponseParameters'(Rest,
							 0, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'skip_32_grpc.testing.ResponseParameters'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    'dfp_read_field_def_grpc.testing.ResponseParameters'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'skip_64_grpc.testing.ResponseParameters'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    'dfp_read_field_def_grpc.testing.ResponseParameters'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'd_msg_grpc.testing.StreamingOutputCallRequest'(Bin,
						TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(Bin,
								 0, 0,
								 id('COMPRESSABLE',
								    TrUserData),
								 id([],
								    TrUserData),
								 id(undefined,
								    TrUserData),
								 id(undefined,
								    TrUserData),
								 TrUserData).

'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(<<8,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'd_field_grpc.testing.StreamingOutputCallRequest_response_type'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData);
'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(<<18,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'd_field_grpc.testing.StreamingOutputCallRequest_response_parameters'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData);
'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(<<26,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'd_field_grpc.testing.StreamingOutputCallRequest_payload'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData);
'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(<<58,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'd_field_grpc.testing.StreamingOutputCallRequest_response_status'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(<<>>,
							     0, 0, F@_1, R1,
							     F@_3, F@_4,
							     TrUserData) ->
    S1 = #{response_parameters =>
	       lists_reverse(R1, TrUserData)},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{response_type => F@_1}
	 end,
    S3 = if F@_3 == '$undef' -> S2;
	    true -> S2#{payload => F@_3}
	 end,
    if F@_4 == '$undef' -> S3;
       true -> S3#{response_status => F@_4}
    end;
'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(Other,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'dg_read_field_def_grpc.testing.StreamingOutputCallRequest'(Other,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData).

'dg_read_field_def_grpc.testing.StreamingOutputCallRequest'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_grpc.testing.StreamingOutputCallRequest'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								TrUserData);
'dg_read_field_def_grpc.testing.StreamingOutputCallRequest'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_grpc.testing.StreamingOutputCallRequest_response_type'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData);
      18 ->
	  'd_field_grpc.testing.StreamingOutputCallRequest_response_parameters'(Rest,
										0,
										0,
										F@_1,
										F@_2,
										F@_3,
										F@_4,
										TrUserData);
      26 ->
	  'd_field_grpc.testing.StreamingOutputCallRequest_payload'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4,
								    TrUserData);
      58 ->
	  'd_field_grpc.testing.StreamingOutputCallRequest_response_status'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_grpc.testing.StreamingOutputCallRequest'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
	    1 ->
		'skip_64_grpc.testing.StreamingOutputCallRequest'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
	    2 ->
		'skip_length_delimited_grpc.testing.StreamingOutputCallRequest'(Rest,
										0,
										0,
										F@_1,
										F@_2,
										F@_3,
										F@_4,
										TrUserData);
	    3 ->
		'skip_group_grpc.testing.StreamingOutputCallRequest'(Rest,
								     Key bsr 3,
								     0, F@_1,
								     F@_2, F@_3,
								     F@_4,
								     TrUserData);
	    5 ->
		'skip_32_grpc.testing.StreamingOutputCallRequest'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData)
	  end
    end;
'dg_read_field_def_grpc.testing.StreamingOutputCallRequest'(<<>>,
							    0, 0, F@_1, R1,
							    F@_3, F@_4,
							    TrUserData) ->
    S1 = #{response_parameters =>
	       lists_reverse(R1, TrUserData)},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{response_type => F@_1}
	 end,
    S3 = if F@_3 == '$undef' -> S2;
	    true -> S2#{payload => F@_3}
	 end,
    if F@_4 == '$undef' -> S3;
       true -> S3#{response_status => F@_4}
    end.

'd_field_grpc.testing.StreamingOutputCallRequest_response_type'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.StreamingOutputCallRequest_response_type'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData);
'd_field_grpc.testing.StreamingOutputCallRequest_response_type'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, _, F@_2,
								F@_3, F@_4,
								TrUserData) ->
    {NewFValue, RestF} =
	{'d_enum_grpc.testing.PayloadType'(begin
					     <<Res:32/signed-native>> = <<(X bsl
									     N
									     +
									     Acc):32/unsigned-native>>,
					     Res
					   end),
	 Rest},
    'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(RestF,
								 0, 0,
								 NewFValue,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'd_field_grpc.testing.StreamingOutputCallRequest_response_parameters'(<<1:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.StreamingOutputCallRequest_response_parameters'(Rest,
									  N + 7,
									  X bsl
									    N
									    +
									    Acc,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData);
'd_field_grpc.testing.StreamingOutputCallRequest_response_parameters'(<<0:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      Prev,
								      F@_3,
								      F@_4,
								      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_grpc.testing.ResponseParameters'(Bs,
								       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(RestF,
								 0, 0, F@_1,
								 cons(NewFValue,
								      Prev,
								      TrUserData),
								 F@_3, F@_4,
								 TrUserData).

'd_field_grpc.testing.StreamingOutputCallRequest_payload'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.StreamingOutputCallRequest_payload'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, TrUserData);
'd_field_grpc.testing.StreamingOutputCallRequest_payload'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  Prev, F@_4,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_grpc.testing.Payload'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(RestF,
								 0, 0, F@_1,
								 F@_2,
								 if Prev ==
								      '$undef' ->
									NewFValue;
								    true ->
									'merge_msg_grpc.testing.Payload'(Prev,
													 NewFValue,
													 TrUserData)
								 end,
								 F@_4,
								 TrUserData).

'd_field_grpc.testing.StreamingOutputCallRequest_response_status'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.StreamingOutputCallRequest_response_status'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
'd_field_grpc.testing.StreamingOutputCallRequest_response_status'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2, F@_3,
								  Prev,
								  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_grpc.testing.EchoStatus'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(RestF,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 if Prev ==
								      '$undef' ->
									NewFValue;
								    true ->
									'merge_msg_grpc.testing.EchoStatus'(Prev,
													    NewFValue,
													    TrUserData)
								 end,
								 TrUserData).

'skip_varint_grpc.testing.StreamingOutputCallRequest'(<<1:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData) ->
    'skip_varint_grpc.testing.StreamingOutputCallRequest'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData);
'skip_varint_grpc.testing.StreamingOutputCallRequest'(<<0:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'skip_length_delimited_grpc.testing.StreamingOutputCallRequest'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData)
    when N < 57 ->
    'skip_length_delimited_grpc.testing.StreamingOutputCallRequest'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData);
'skip_length_delimited_grpc.testing.StreamingOutputCallRequest'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(Rest2,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'skip_group_grpc.testing.StreamingOutputCallRequest'(Bin,
						     FNum, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(Rest,
								 0, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'skip_32_grpc.testing.StreamingOutputCallRequest'(<<_:32,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'skip_64_grpc.testing.StreamingOutputCallRequest'(<<_:64,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingOutputCallRequest'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'd_msg_grpc.testing.StreamingInputCallResponse'(Bin,
						TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingInputCallResponse'(Bin,
								 0, 0,
								 id(0,
								    TrUserData),
								 TrUserData).

'dfp_read_field_def_grpc.testing.StreamingInputCallResponse'(<<8,
							       Rest/binary>>,
							     Z1, Z2, F@_1,
							     TrUserData) ->
    'd_field_grpc.testing.StreamingInputCallResponse_aggregated_payload_size'(Rest,
									      Z1,
									      Z2,
									      F@_1,
									      TrUserData);
'dfp_read_field_def_grpc.testing.StreamingInputCallResponse'(<<>>,
							     0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{aggregated_payload_size => F@_1}
    end;
'dfp_read_field_def_grpc.testing.StreamingInputCallResponse'(Other,
							     Z1, Z2, F@_1,
							     TrUserData) ->
    'dg_read_field_def_grpc.testing.StreamingInputCallResponse'(Other,
								Z1, Z2, F@_1,
								TrUserData).

'dg_read_field_def_grpc.testing.StreamingInputCallResponse'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1,
							    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_grpc.testing.StreamingInputCallResponse'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1,
								TrUserData);
'dg_read_field_def_grpc.testing.StreamingInputCallResponse'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1,
							    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_grpc.testing.StreamingInputCallResponse_aggregated_payload_size'(Rest,
										    0,
										    0,
										    F@_1,
										    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_grpc.testing.StreamingInputCallResponse'(Rest,
								      0, 0,
								      F@_1,
								      TrUserData);
	    1 ->
		'skip_64_grpc.testing.StreamingInputCallResponse'(Rest,
								  0, 0, F@_1,
								  TrUserData);
	    2 ->
		'skip_length_delimited_grpc.testing.StreamingInputCallResponse'(Rest,
										0,
										0,
										F@_1,
										TrUserData);
	    3 ->
		'skip_group_grpc.testing.StreamingInputCallResponse'(Rest,
								     Key bsr 3,
								     0, F@_1,
								     TrUserData);
	    5 ->
		'skip_32_grpc.testing.StreamingInputCallResponse'(Rest,
								  0, 0, F@_1,
								  TrUserData)
	  end
    end;
'dg_read_field_def_grpc.testing.StreamingInputCallResponse'(<<>>,
							    0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{aggregated_payload_size => F@_1}
    end.

'd_field_grpc.testing.StreamingInputCallResponse_aggregated_payload_size'(<<1:1,
									    X:7,
									    Rest/binary>>,
									  N,
									  Acc,
									  F@_1,
									  TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.StreamingInputCallResponse_aggregated_payload_size'(Rest,
									      N
										+
										7,
									      X
										bsl
										N
										+
										Acc,
									      F@_1,
									      TrUserData);
'd_field_grpc.testing.StreamingInputCallResponse_aggregated_payload_size'(<<0:1,
									    X:7,
									    Rest/binary>>,
									  N,
									  Acc,
									  _,
									  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'dfp_read_field_def_grpc.testing.StreamingInputCallResponse'(RestF,
								 0, 0,
								 NewFValue,
								 TrUserData).

'skip_varint_grpc.testing.StreamingInputCallResponse'(<<1:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1,
						      TrUserData) ->
    'skip_varint_grpc.testing.StreamingInputCallResponse'(Rest,
							  Z1, Z2, F@_1,
							  TrUserData);
'skip_varint_grpc.testing.StreamingInputCallResponse'(<<0:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1,
						      TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingInputCallResponse'(Rest,
								 Z1, Z2, F@_1,
								 TrUserData).

'skip_length_delimited_grpc.testing.StreamingInputCallResponse'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								TrUserData)
    when N < 57 ->
    'skip_length_delimited_grpc.testing.StreamingInputCallResponse'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1,
								    TrUserData);
'skip_length_delimited_grpc.testing.StreamingInputCallResponse'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.testing.StreamingInputCallResponse'(Rest2,
								 0, 0, F@_1,
								 TrUserData).

'skip_group_grpc.testing.StreamingInputCallResponse'(Bin,
						     FNum, Z2, F@_1,
						     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.testing.StreamingInputCallResponse'(Rest,
								 0, Z2, F@_1,
								 TrUserData).

'skip_32_grpc.testing.StreamingInputCallResponse'(<<_:32,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingInputCallResponse'(Rest,
								 Z1, Z2, F@_1,
								 TrUserData).

'skip_64_grpc.testing.StreamingInputCallResponse'(<<_:64,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingInputCallResponse'(Rest,
								 Z1, Z2, F@_1,
								 TrUserData).

'd_msg_grpc.testing.SimpleResponse'(Bin, TrUserData) ->
    'dfp_read_field_def_grpc.testing.SimpleResponse'(Bin, 0,
						     0,
						     id(undefined, TrUserData),
						     id(<<>>, TrUserData),
						     id(<<>>, TrUserData),
						     TrUserData).

'dfp_read_field_def_grpc.testing.SimpleResponse'(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    'd_field_grpc.testing.SimpleResponse_payload'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData);
'dfp_read_field_def_grpc.testing.SimpleResponse'(<<18,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    'd_field_grpc.testing.SimpleResponse_username'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData);
'dfp_read_field_def_grpc.testing.SimpleResponse'(<<26,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    'd_field_grpc.testing.SimpleResponse_oauth_scope'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData);
'dfp_read_field_def_grpc.testing.SimpleResponse'(<<>>,
						 0, 0, F@_1, F@_2, F@_3, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{payload => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{username => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{oauth_scope => F@_3}
    end;
'dfp_read_field_def_grpc.testing.SimpleResponse'(Other,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    'dg_read_field_def_grpc.testing.SimpleResponse'(Other,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData).

'dg_read_field_def_grpc.testing.SimpleResponse'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3,
						TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_grpc.testing.SimpleResponse'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, TrUserData);
'dg_read_field_def_grpc.testing.SimpleResponse'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3,
						TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_grpc.testing.SimpleResponse_payload'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							TrUserData);
      18 ->
	  'd_field_grpc.testing.SimpleResponse_username'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 TrUserData);
      26 ->
	  'd_field_grpc.testing.SimpleResponse_oauth_scope'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_grpc.testing.SimpleResponse'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    1 ->
		'skip_64_grpc.testing.SimpleResponse'(Rest, 0, 0, F@_1,
						      F@_2, F@_3, TrUserData);
	    2 ->
		'skip_length_delimited_grpc.testing.SimpleResponse'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    TrUserData);
	    3 ->
		'skip_group_grpc.testing.SimpleResponse'(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, F@_3,
							 TrUserData);
	    5 ->
		'skip_32_grpc.testing.SimpleResponse'(Rest, 0, 0, F@_1,
						      F@_2, F@_3, TrUserData)
	  end
    end;
'dg_read_field_def_grpc.testing.SimpleResponse'(<<>>, 0,
						0, F@_1, F@_2, F@_3, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{payload => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{username => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{oauth_scope => F@_3}
    end.

'd_field_grpc.testing.SimpleResponse_payload'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.SimpleResponse_payload'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, TrUserData);
'd_field_grpc.testing.SimpleResponse_payload'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, Prev, F@_2, F@_3,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_grpc.testing.Payload'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.SimpleResponse'(RestF,
						     0, 0,
						     if Prev == '$undef' ->
							    NewFValue;
							true ->
							    'merge_msg_grpc.testing.Payload'(Prev,
											     NewFValue,
											     TrUserData)
						     end,
						     F@_2, F@_3, TrUserData).

'd_field_grpc.testing.SimpleResponse_username'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.SimpleResponse_username'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'd_field_grpc.testing.SimpleResponse_username'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, _, F@_3,
					       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.SimpleResponse'(RestF,
						     0, 0, F@_1, NewFValue,
						     F@_3, TrUserData).

'd_field_grpc.testing.SimpleResponse_oauth_scope'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.SimpleResponse_oauth_scope'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3,
						      TrUserData);
'd_field_grpc.testing.SimpleResponse_oauth_scope'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, _,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.SimpleResponse'(RestF,
						     0, 0, F@_1, F@_2,
						     NewFValue, TrUserData).

'skip_varint_grpc.testing.SimpleResponse'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    'skip_varint_grpc.testing.SimpleResponse'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
'skip_varint_grpc.testing.SimpleResponse'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    'dfp_read_field_def_grpc.testing.SimpleResponse'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

'skip_length_delimited_grpc.testing.SimpleResponse'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 57 ->
    'skip_length_delimited_grpc.testing.SimpleResponse'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
'skip_length_delimited_grpc.testing.SimpleResponse'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.testing.SimpleResponse'(Rest2,
						     0, 0, F@_1, F@_2, F@_3,
						     TrUserData).

'skip_group_grpc.testing.SimpleResponse'(Bin, FNum, Z2,
					 F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.testing.SimpleResponse'(Rest,
						     0, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

'skip_32_grpc.testing.SimpleResponse'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_grpc.testing.SimpleResponse'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

'skip_64_grpc.testing.SimpleResponse'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_grpc.testing.SimpleResponse'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

'd_msg_grpc.testing.StreamingInputCallRequest'(Bin,
					       TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingInputCallRequest'(Bin,
								0, 0,
								id(undefined,
								   TrUserData),
								id(undefined,
								   TrUserData),
								TrUserData).

'dfp_read_field_def_grpc.testing.StreamingInputCallRequest'(<<10,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData) ->
    'd_field_grpc.testing.StreamingInputCallRequest_payload'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData);
'dfp_read_field_def_grpc.testing.StreamingInputCallRequest'(<<18,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData) ->
    'd_field_grpc.testing.StreamingInputCallRequest_expect_compressed'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       TrUserData);
'dfp_read_field_def_grpc.testing.StreamingInputCallRequest'(<<>>,
							    0, 0, F@_1, F@_2,
							    _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{payload => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{expect_compressed => F@_2}
    end;
'dfp_read_field_def_grpc.testing.StreamingInputCallRequest'(Other,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData) ->
    'dg_read_field_def_grpc.testing.StreamingInputCallRequest'(Other,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData).

'dg_read_field_def_grpc.testing.StreamingInputCallRequest'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_grpc.testing.StreamingInputCallRequest'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2,
							       TrUserData);
'dg_read_field_def_grpc.testing.StreamingInputCallRequest'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_grpc.testing.StreamingInputCallRequest_payload'(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
      18 ->
	  'd_field_grpc.testing.StreamingInputCallRequest_expect_compressed'(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_grpc.testing.StreamingInputCallRequest'(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
	    1 ->
		'skip_64_grpc.testing.StreamingInputCallRequest'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
	    2 ->
		'skip_length_delimited_grpc.testing.StreamingInputCallRequest'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       TrUserData);
	    3 ->
		'skip_group_grpc.testing.StreamingInputCallRequest'(Rest,
								    Key bsr 3,
								    0, F@_1,
								    F@_2,
								    TrUserData);
	    5 ->
		'skip_32_grpc.testing.StreamingInputCallRequest'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData)
	  end
    end;
'dg_read_field_def_grpc.testing.StreamingInputCallRequest'(<<>>,
							   0, 0, F@_1, F@_2,
							   _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{payload => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{expect_compressed => F@_2}
    end.

'd_field_grpc.testing.StreamingInputCallRequest_payload'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.StreamingInputCallRequest_payload'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2,
							     TrUserData);
'd_field_grpc.testing.StreamingInputCallRequest_payload'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, Prev, F@_2,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_grpc.testing.Payload'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.StreamingInputCallRequest'(RestF,
								0, 0,
								if Prev ==
								     '$undef' ->
								       NewFValue;
								   true ->
								       'merge_msg_grpc.testing.Payload'(Prev,
													NewFValue,
													TrUserData)
								end,
								F@_2,
								TrUserData).

'd_field_grpc.testing.StreamingInputCallRequest_expect_compressed'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2,
								   TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.StreamingInputCallRequest_expect_compressed'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       TrUserData);
'd_field_grpc.testing.StreamingInputCallRequest_expect_compressed'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   Prev,
								   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_grpc.testing.BoolValue'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.StreamingInputCallRequest'(RestF,
								0, 0, F@_1,
								if Prev ==
								     '$undef' ->
								       NewFValue;
								   true ->
								       'merge_msg_grpc.testing.BoolValue'(Prev,
													  NewFValue,
													  TrUserData)
								end,
								TrUserData).

'skip_varint_grpc.testing.StreamingInputCallRequest'(<<1:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData) ->
    'skip_varint_grpc.testing.StreamingInputCallRequest'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData);
'skip_varint_grpc.testing.StreamingInputCallRequest'(<<0:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingInputCallRequest'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData).

'skip_length_delimited_grpc.testing.StreamingInputCallRequest'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_grpc.testing.StreamingInputCallRequest'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   TrUserData);
'skip_length_delimited_grpc.testing.StreamingInputCallRequest'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2,
							       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.testing.StreamingInputCallRequest'(Rest2,
								0, 0, F@_1,
								F@_2,
								TrUserData).

'skip_group_grpc.testing.StreamingInputCallRequest'(Bin,
						    FNum, Z2, F@_1, F@_2,
						    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.testing.StreamingInputCallRequest'(Rest,
								0, Z2, F@_1,
								F@_2,
								TrUserData).

'skip_32_grpc.testing.StreamingInputCallRequest'(<<_:32,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingInputCallRequest'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData).

'skip_64_grpc.testing.StreamingInputCallRequest'(<<_:64,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingInputCallRequest'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData).

'd_msg_grpc.testing.SimpleRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_grpc.testing.SimpleRequest'(Bin, 0,
						    0,
						    id('COMPRESSABLE',
						       TrUserData),
						    id(0, TrUserData),
						    id(undefined, TrUserData),
						    id(false, TrUserData),
						    id(false, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    TrUserData).

'dfp_read_field_def_grpc.testing.SimpleRequest'(<<8,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData) ->
    'd_field_grpc.testing.SimpleRequest_response_type'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData);
'dfp_read_field_def_grpc.testing.SimpleRequest'(<<16,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData) ->
    'd_field_grpc.testing.SimpleRequest_response_size'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData);
'dfp_read_field_def_grpc.testing.SimpleRequest'(<<26,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData) ->
    'd_field_grpc.testing.SimpleRequest_payload'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8,
						 TrUserData);
'dfp_read_field_def_grpc.testing.SimpleRequest'(<<32,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData) ->
    'd_field_grpc.testing.SimpleRequest_fill_username'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData);
'dfp_read_field_def_grpc.testing.SimpleRequest'(<<40,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData) ->
    'd_field_grpc.testing.SimpleRequest_fill_oauth_scope'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  TrUserData);
'dfp_read_field_def_grpc.testing.SimpleRequest'(<<50,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData) ->
    'd_field_grpc.testing.SimpleRequest_response_compressed'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     TrUserData);
'dfp_read_field_def_grpc.testing.SimpleRequest'(<<58,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData) ->
    'd_field_grpc.testing.SimpleRequest_response_status'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, F@_8,
							 TrUserData);
'dfp_read_field_def_grpc.testing.SimpleRequest'(<<66,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData) ->
    'd_field_grpc.testing.SimpleRequest_expect_compressed'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   TrUserData);
'dfp_read_field_def_grpc.testing.SimpleRequest'(<<>>, 0,
						0, F@_1, F@_2, F@_3, F@_4, F@_5,
						F@_6, F@_7, F@_8, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{response_type => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{response_size => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{payload => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{fill_username => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{fill_oauth_scope => F@_5}
	 end,
    S7 = if F@_6 == '$undef' -> S6;
	    true -> S6#{response_compressed => F@_6}
	 end,
    S8 = if F@_7 == '$undef' -> S7;
	    true -> S7#{response_status => F@_7}
	 end,
    if F@_8 == '$undef' -> S8;
       true -> S8#{expect_compressed => F@_8}
    end;
'dfp_read_field_def_grpc.testing.SimpleRequest'(Other,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData) ->
    'dg_read_field_def_grpc.testing.SimpleRequest'(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData).

'dg_read_field_def_grpc.testing.SimpleRequest'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8,
					       TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_grpc.testing.SimpleRequest'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, TrUserData);
'dg_read_field_def_grpc.testing.SimpleRequest'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8,
					       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_grpc.testing.SimpleRequest_response_type'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     TrUserData);
      16 ->
	  'd_field_grpc.testing.SimpleRequest_response_size'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     TrUserData);
      26 ->
	  'd_field_grpc.testing.SimpleRequest_payload'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       TrUserData);
      32 ->
	  'd_field_grpc.testing.SimpleRequest_fill_username'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     TrUserData);
      40 ->
	  'd_field_grpc.testing.SimpleRequest_fill_oauth_scope'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								F@_8,
								TrUserData);
      50 ->
	  'd_field_grpc.testing.SimpleRequest_response_compressed'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6, F@_7,
								   F@_8,
								   TrUserData);
      58 ->
	  'd_field_grpc.testing.SimpleRequest_response_status'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4, F@_5,
							       F@_6, F@_7, F@_8,
							       TrUserData);
      66 ->
	  'd_field_grpc.testing.SimpleRequest_expect_compressed'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 F@_8,
								 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_grpc.testing.SimpleRequest'(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6, F@_7, F@_8,
							 TrUserData);
	    1 ->
		'skip_64_grpc.testing.SimpleRequest'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8,
						     TrUserData);
	    2 ->
		'skip_length_delimited_grpc.testing.SimpleRequest'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6, F@_7,
								   F@_8,
								   TrUserData);
	    3 ->
		'skip_group_grpc.testing.SimpleRequest'(Rest, Key bsr 3,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, TrUserData);
	    5 ->
		'skip_32_grpc.testing.SimpleRequest'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8,
						     TrUserData)
	  end
    end;
'dg_read_field_def_grpc.testing.SimpleRequest'(<<>>, 0,
					       0, F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{response_type => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{response_size => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{payload => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{fill_username => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{fill_oauth_scope => F@_5}
	 end,
    S7 = if F@_6 == '$undef' -> S6;
	    true -> S6#{response_compressed => F@_6}
	 end,
    S8 = if F@_7 == '$undef' -> S7;
	    true -> S7#{response_status => F@_7}
	 end,
    if F@_8 == '$undef' -> S8;
       true -> S8#{expect_compressed => F@_8}
    end.

'd_field_grpc.testing.SimpleRequest_response_type'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.SimpleRequest_response_type'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       TrUserData);
'd_field_grpc.testing.SimpleRequest_response_type'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, _, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    {NewFValue, RestF} =
	{'d_enum_grpc.testing.PayloadType'(begin
					     <<Res:32/signed-native>> = <<(X bsl
									     N
									     +
									     Acc):32/unsigned-native>>,
					     Res
					   end),
	 Rest},
    'dfp_read_field_def_grpc.testing.SimpleRequest'(RestF,
						    0, 0, NewFValue, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, TrUserData).

'd_field_grpc.testing.SimpleRequest_response_size'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.SimpleRequest_response_size'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       TrUserData);
'd_field_grpc.testing.SimpleRequest_response_size'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, _, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'dfp_read_field_def_grpc.testing.SimpleRequest'(RestF,
						    0, 0, F@_1, NewFValue, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, TrUserData).

'd_field_grpc.testing.SimpleRequest_payload'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.SimpleRequest_payload'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, TrUserData);
'd_field_grpc.testing.SimpleRequest_payload'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, Prev, F@_4,
					     F@_5, F@_6, F@_7, F@_8,
					     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_grpc.testing.Payload'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.SimpleRequest'(RestF,
						    0, 0, F@_1, F@_2,
						    if Prev == '$undef' ->
							   NewFValue;
						       true ->
							   'merge_msg_grpc.testing.Payload'(Prev,
											    NewFValue,
											    TrUserData)
						    end,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, TrUserData).

'd_field_grpc.testing.SimpleRequest_fill_username'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.SimpleRequest_fill_username'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       TrUserData);
'd_field_grpc.testing.SimpleRequest_fill_username'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3, _,
						   F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc =/= 0, Rest},
    'dfp_read_field_def_grpc.testing.SimpleRequest'(RestF,
						    0, 0, F@_1, F@_2, F@_3,
						    NewFValue, F@_5, F@_6, F@_7,
						    F@_8, TrUserData).

'd_field_grpc.testing.SimpleRequest_fill_oauth_scope'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.SimpleRequest_fill_oauth_scope'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8,
							  TrUserData);
'd_field_grpc.testing.SimpleRequest_fill_oauth_scope'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, _, F@_6, F@_7, F@_8,
						      TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc =/= 0, Rest},
    'dfp_read_field_def_grpc.testing.SimpleRequest'(RestF,
						    0, 0, F@_1, F@_2, F@_3,
						    F@_4, NewFValue, F@_6, F@_7,
						    F@_8, TrUserData).

'd_field_grpc.testing.SimpleRequest_response_compressed'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, F@_8, TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.SimpleRequest_response_compressed'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, F@_8,
							     TrUserData);
'd_field_grpc.testing.SimpleRequest_response_compressed'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, Prev,
							 F@_7, F@_8,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_grpc.testing.BoolValue'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.SimpleRequest'(RestF,
						    0, 0, F@_1, F@_2, F@_3,
						    F@_4, F@_5,
						    if Prev == '$undef' ->
							   NewFValue;
						       true ->
							   'merge_msg_grpc.testing.BoolValue'(Prev,
											      NewFValue,
											      TrUserData)
						    end,
						    F@_7, F@_8, TrUserData).

'd_field_grpc.testing.SimpleRequest_response_status'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.SimpleRequest_response_status'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6, F@_7, F@_8,
							 TrUserData);
'd_field_grpc.testing.SimpleRequest_response_status'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, Prev,
						     F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_grpc.testing.EchoStatus'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.SimpleRequest'(RestF,
						    0, 0, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6,
						    if Prev == '$undef' ->
							   NewFValue;
						       true ->
							   'merge_msg_grpc.testing.EchoStatus'(Prev,
											       NewFValue,
											       TrUserData)
						    end,
						    F@_8, TrUserData).

'd_field_grpc.testing.SimpleRequest_expect_compressed'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.SimpleRequest_expect_compressed'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   F@_7, F@_8,
							   TrUserData);
'd_field_grpc.testing.SimpleRequest_expect_compressed'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_grpc.testing.BoolValue'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.SimpleRequest'(RestF,
						    0, 0, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    if Prev == '$undef' ->
							   NewFValue;
						       true ->
							   'merge_msg_grpc.testing.BoolValue'(Prev,
											      NewFValue,
											      TrUserData)
						    end,
						    TrUserData).

'skip_varint_grpc.testing.SimpleRequest'(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData) ->
    'skip_varint_grpc.testing.SimpleRequest'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, TrUserData);
'skip_varint_grpc.testing.SimpleRequest'(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_grpc.testing.SimpleRequest'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, TrUserData).

'skip_length_delimited_grpc.testing.SimpleRequest'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData)
    when N < 57 ->
    'skip_length_delimited_grpc.testing.SimpleRequest'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       TrUserData);
'skip_length_delimited_grpc.testing.SimpleRequest'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.testing.SimpleRequest'(Rest2,
						    0, 0, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, TrUserData).

'skip_group_grpc.testing.SimpleRequest'(Bin, FNum, Z2,
					F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.testing.SimpleRequest'(Rest, 0,
						    Z2, F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7, F@_8,
						    TrUserData).

'skip_32_grpc.testing.SimpleRequest'(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_grpc.testing.SimpleRequest'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, TrUserData).

'skip_64_grpc.testing.SimpleRequest'(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_grpc.testing.SimpleRequest'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, TrUserData).

'd_msg_grpc.testing.ReconnectInfo'(Bin, TrUserData) ->
    'dfp_read_field_def_grpc.testing.ReconnectInfo'(Bin, 0,
						    0, id(false, TrUserData),
						    id([], TrUserData),
						    TrUserData).

'dfp_read_field_def_grpc.testing.ReconnectInfo'(<<8,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'd_field_grpc.testing.ReconnectInfo_passed'(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_grpc.testing.ReconnectInfo'(<<18,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'd_pfield_grpc.testing.ReconnectInfo_backoff_ms'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData);
'dfp_read_field_def_grpc.testing.ReconnectInfo'(<<16,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'd_field_grpc.testing.ReconnectInfo_backoff_ms'(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData);
'dfp_read_field_def_grpc.testing.ReconnectInfo'(<<>>, 0,
						0, F@_1, R1, TrUserData) ->
    S1 = #{backoff_ms => lists_reverse(R1, TrUserData)},
    if F@_1 == '$undef' -> S1;
       true -> S1#{passed => F@_1}
    end;
'dfp_read_field_def_grpc.testing.ReconnectInfo'(Other,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'dg_read_field_def_grpc.testing.ReconnectInfo'(Other,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData).

'dg_read_field_def_grpc.testing.ReconnectInfo'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_grpc.testing.ReconnectInfo'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
'dg_read_field_def_grpc.testing.ReconnectInfo'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_grpc.testing.ReconnectInfo_passed'(Rest, 0, 0,
						      F@_1, F@_2, TrUserData);
      18 ->
	  'd_pfield_grpc.testing.ReconnectInfo_backoff_ms'(Rest,
							   0, 0, F@_1, F@_2,
							   TrUserData);
      16 ->
	  'd_field_grpc.testing.ReconnectInfo_backoff_ms'(Rest, 0,
							  0, F@_1, F@_2,
							  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_grpc.testing.ReconnectInfo'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    1 ->
		'skip_64_grpc.testing.ReconnectInfo'(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_grpc.testing.ReconnectInfo'(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
	    3 ->
		'skip_group_grpc.testing.ReconnectInfo'(Rest, Key bsr 3,
							0, F@_1, F@_2,
							TrUserData);
	    5 ->
		'skip_32_grpc.testing.ReconnectInfo'(Rest, 0, 0, F@_1,
						     F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_grpc.testing.ReconnectInfo'(<<>>, 0,
					       0, F@_1, R1, TrUserData) ->
    S1 = #{backoff_ms => lists_reverse(R1, TrUserData)},
    if F@_1 == '$undef' -> S1;
       true -> S1#{passed => F@_1}
    end.

'd_field_grpc.testing.ReconnectInfo_passed'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.ReconnectInfo_passed'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
'd_field_grpc.testing.ReconnectInfo_passed'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc =/= 0, Rest},
    'dfp_read_field_def_grpc.testing.ReconnectInfo'(RestF,
						    0, 0, NewFValue, F@_2,
						    TrUserData).

'd_field_grpc.testing.ReconnectInfo_backoff_ms'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.ReconnectInfo_backoff_ms'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
'd_field_grpc.testing.ReconnectInfo_backoff_ms'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, Prev,
						TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'dfp_read_field_def_grpc.testing.ReconnectInfo'(RestF,
						    0, 0, F@_1,
						    cons(NewFValue, Prev,
							 TrUserData),
						    TrUserData).

'd_pfield_grpc.testing.ReconnectInfo_backoff_ms'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_pfield_grpc.testing.ReconnectInfo_backoff_ms'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
'd_pfield_grpc.testing.ReconnectInfo_backoff_ms'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	'd_packed_field_grpc.testing.ReconnectInfo_backoff_ms'(PackedBytes,
							       0, 0, E),
    'dfp_read_field_def_grpc.testing.ReconnectInfo'(Rest2,
						    0, 0, F@_1, NewSeq,
						    TrUserData).

'd_packed_field_grpc.testing.ReconnectInfo_backoff_ms'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, AccSeq)
    when N < 57 ->
    'd_packed_field_grpc.testing.ReconnectInfo_backoff_ms'(Rest,
							   N + 7, X bsl N + Acc,
							   AccSeq);
'd_packed_field_grpc.testing.ReconnectInfo_backoff_ms'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, AccSeq) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'd_packed_field_grpc.testing.ReconnectInfo_backoff_ms'(RestF,
							   0, 0,
							   [NewFValue
							    | AccSeq]);
'd_packed_field_grpc.testing.ReconnectInfo_backoff_ms'(<<>>,
						       0, 0, AccSeq) ->
    AccSeq.

'skip_varint_grpc.testing.ReconnectInfo'(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_grpc.testing.ReconnectInfo'(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
'skip_varint_grpc.testing.ReconnectInfo'(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_grpc.testing.ReconnectInfo'(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

'skip_length_delimited_grpc.testing.ReconnectInfo'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    'skip_length_delimited_grpc.testing.ReconnectInfo'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'skip_length_delimited_grpc.testing.ReconnectInfo'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.testing.ReconnectInfo'(Rest2,
						    0, 0, F@_1, F@_2,
						    TrUserData).

'skip_group_grpc.testing.ReconnectInfo'(Bin, FNum, Z2,
					F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.testing.ReconnectInfo'(Rest, 0,
						    Z2, F@_1, F@_2, TrUserData).

'skip_32_grpc.testing.ReconnectInfo'(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_grpc.testing.ReconnectInfo'(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

'skip_64_grpc.testing.ReconnectInfo'(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_grpc.testing.ReconnectInfo'(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

'd_msg_grpc.testing.StreamingOutputCallResponse'(Bin,
						 TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingOutputCallResponse'(Bin,
								  0, 0,
								  id(undefined,
								     TrUserData),
								  TrUserData).

'dfp_read_field_def_grpc.testing.StreamingOutputCallResponse'(<<10,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      TrUserData) ->
    'd_field_grpc.testing.StreamingOutputCallResponse_payload'(Rest,
							       Z1, Z2, F@_1,
							       TrUserData);
'dfp_read_field_def_grpc.testing.StreamingOutputCallResponse'(<<>>,
							      0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{payload => F@_1}
    end;
'dfp_read_field_def_grpc.testing.StreamingOutputCallResponse'(Other,
							      Z1, Z2, F@_1,
							      TrUserData) ->
    'dg_read_field_def_grpc.testing.StreamingOutputCallResponse'(Other,
								 Z1, Z2, F@_1,
								 TrUserData).

'dg_read_field_def_grpc.testing.StreamingOutputCallResponse'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1,
							     TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_grpc.testing.StreamingOutputCallResponse'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1,
								 TrUserData);
'dg_read_field_def_grpc.testing.StreamingOutputCallResponse'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1,
							     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_grpc.testing.StreamingOutputCallResponse_payload'(Rest,
								     0, 0, F@_1,
								     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_grpc.testing.StreamingOutputCallResponse'(Rest,
								       0, 0,
								       F@_1,
								       TrUserData);
	    1 ->
		'skip_64_grpc.testing.StreamingOutputCallResponse'(Rest,
								   0, 0, F@_1,
								   TrUserData);
	    2 ->
		'skip_length_delimited_grpc.testing.StreamingOutputCallResponse'(Rest,
										 0,
										 0,
										 F@_1,
										 TrUserData);
	    3 ->
		'skip_group_grpc.testing.StreamingOutputCallResponse'(Rest,
								      Key bsr 3,
								      0, F@_1,
								      TrUserData);
	    5 ->
		'skip_32_grpc.testing.StreamingOutputCallResponse'(Rest,
								   0, 0, F@_1,
								   TrUserData)
	  end
    end;
'dg_read_field_def_grpc.testing.StreamingOutputCallResponse'(<<>>,
							     0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{payload => F@_1}
    end.

'd_field_grpc.testing.StreamingOutputCallResponse_payload'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1,
							   TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.StreamingOutputCallResponse_payload'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1,
							       TrUserData);
'd_field_grpc.testing.StreamingOutputCallResponse_payload'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, Prev,
							   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_grpc.testing.Payload'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_grpc.testing.StreamingOutputCallResponse'(RestF,
								  0, 0,
								  if Prev ==
								       '$undef' ->
									 NewFValue;
								     true ->
									 'merge_msg_grpc.testing.Payload'(Prev,
													  NewFValue,
													  TrUserData)
								  end,
								  TrUserData).

'skip_varint_grpc.testing.StreamingOutputCallResponse'(<<1:1,
							 _:7, Rest/binary>>,
						       Z1, Z2, F@_1,
						       TrUserData) ->
    'skip_varint_grpc.testing.StreamingOutputCallResponse'(Rest,
							   Z1, Z2, F@_1,
							   TrUserData);
'skip_varint_grpc.testing.StreamingOutputCallResponse'(<<0:1,
							 _:7, Rest/binary>>,
						       Z1, Z2, F@_1,
						       TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingOutputCallResponse'(Rest,
								  Z1, Z2, F@_1,
								  TrUserData).

'skip_length_delimited_grpc.testing.StreamingOutputCallResponse'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 TrUserData)
    when N < 57 ->
    'skip_length_delimited_grpc.testing.StreamingOutputCallResponse'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1,
								     TrUserData);
'skip_length_delimited_grpc.testing.StreamingOutputCallResponse'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.testing.StreamingOutputCallResponse'(Rest2,
								  0, 0, F@_1,
								  TrUserData).

'skip_group_grpc.testing.StreamingOutputCallResponse'(Bin,
						      FNum, Z2, F@_1,
						      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.testing.StreamingOutputCallResponse'(Rest,
								  0, Z2, F@_1,
								  TrUserData).

'skip_32_grpc.testing.StreamingOutputCallResponse'(<<_:32,
						     Rest/binary>>,
						   Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingOutputCallResponse'(Rest,
								  Z1, Z2, F@_1,
								  TrUserData).

'skip_64_grpc.testing.StreamingOutputCallResponse'(<<_:64,
						     Rest/binary>>,
						   Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_grpc.testing.StreamingOutputCallResponse'(Rest,
								  Z1, Z2, F@_1,
								  TrUserData).

'd_msg_grpc.testing.ReconnectParams'(Bin, TrUserData) ->
    'dfp_read_field_def_grpc.testing.ReconnectParams'(Bin,
						      0, 0, id(0, TrUserData),
						      TrUserData).

'dfp_read_field_def_grpc.testing.ReconnectParams'(<<8,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_grpc.testing.ReconnectParams_max_reconnect_backoff_ms'(Rest,
								    Z1, Z2,
								    F@_1,
								    TrUserData);
'dfp_read_field_def_grpc.testing.ReconnectParams'(<<>>,
						  0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{max_reconnect_backoff_ms => F@_1}
    end;
'dfp_read_field_def_grpc.testing.ReconnectParams'(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    'dg_read_field_def_grpc.testing.ReconnectParams'(Other,
						     Z1, Z2, F@_1, TrUserData).

'dg_read_field_def_grpc.testing.ReconnectParams'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_grpc.testing.ReconnectParams'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
'dg_read_field_def_grpc.testing.ReconnectParams'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_grpc.testing.ReconnectParams_max_reconnect_backoff_ms'(Rest,
									  0, 0,
									  F@_1,
									  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_grpc.testing.ReconnectParams'(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		'skip_64_grpc.testing.ReconnectParams'(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		'skip_length_delimited_grpc.testing.ReconnectParams'(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		'skip_group_grpc.testing.ReconnectParams'(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		'skip_32_grpc.testing.ReconnectParams'(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
'dg_read_field_def_grpc.testing.ReconnectParams'(<<>>,
						 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{max_reconnect_backoff_ms => F@_1}
    end.

'd_field_grpc.testing.ReconnectParams_max_reconnect_backoff_ms'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								TrUserData)
    when N < 57 ->
    'd_field_grpc.testing.ReconnectParams_max_reconnect_backoff_ms'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1,
								    TrUserData);
'd_field_grpc.testing.ReconnectParams_max_reconnect_backoff_ms'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, _,
								TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'dfp_read_field_def_grpc.testing.ReconnectParams'(RestF,
						      0, 0, NewFValue,
						      TrUserData).

'skip_varint_grpc.testing.ReconnectParams'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_grpc.testing.ReconnectParams'(Rest, Z1, Z2,
					       F@_1, TrUserData);
'skip_varint_grpc.testing.ReconnectParams'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_grpc.testing.ReconnectParams'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_length_delimited_grpc.testing.ReconnectParams'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_grpc.testing.ReconnectParams'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
'skip_length_delimited_grpc.testing.ReconnectParams'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_grpc.testing.ReconnectParams'(Rest2,
						      0, 0, F@_1, TrUserData).

'skip_group_grpc.testing.ReconnectParams'(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_grpc.testing.ReconnectParams'(Rest,
						      0, Z2, F@_1, TrUserData).

'skip_32_grpc.testing.ReconnectParams'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_grpc.testing.ReconnectParams'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_64_grpc.testing.ReconnectParams'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_grpc.testing.ReconnectParams'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'd_enum_grpc.testing.PayloadType'(0) -> 'COMPRESSABLE';
'd_enum_grpc.testing.PayloadType'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'grpc.testing.EchoStatus' ->
	  'merge_msg_grpc.testing.EchoStatus'(Prev, New,
					      TrUserData);
      'grpc.testing.Payload' ->
	  'merge_msg_grpc.testing.Payload'(Prev, New, TrUserData);
      'grpc.testing.BoolValue' ->
	  'merge_msg_grpc.testing.BoolValue'(Prev, New,
					     TrUserData);
      'grpc.testing.ResponseParameters' ->
	  'merge_msg_grpc.testing.ResponseParameters'(Prev, New,
						      TrUserData);
      'grpc.testing.StreamingOutputCallRequest' ->
	  'merge_msg_grpc.testing.StreamingOutputCallRequest'(Prev,
							      New, TrUserData);
      'grpc.testing.StreamingInputCallResponse' ->
	  'merge_msg_grpc.testing.StreamingInputCallResponse'(Prev,
							      New, TrUserData);
      'grpc.testing.SimpleResponse' ->
	  'merge_msg_grpc.testing.SimpleResponse'(Prev, New,
						  TrUserData);
      'grpc.testing.StreamingInputCallRequest' ->
	  'merge_msg_grpc.testing.StreamingInputCallRequest'(Prev,
							     New, TrUserData);
      'grpc.testing.SimpleRequest' ->
	  'merge_msg_grpc.testing.SimpleRequest'(Prev, New,
						 TrUserData);
      'grpc.testing.ReconnectInfo' ->
	  'merge_msg_grpc.testing.ReconnectInfo'(Prev, New,
						 TrUserData);
      'grpc.testing.StreamingOutputCallResponse' ->
	  'merge_msg_grpc.testing.StreamingOutputCallResponse'(Prev,
							       New, TrUserData);
      'grpc.testing.ReconnectParams' ->
	  'merge_msg_grpc.testing.ReconnectParams'(Prev, New,
						   TrUserData)
    end.

'merge_msg_grpc.testing.EchoStatus'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{code := NFcode}} -> S1#{code => NFcode};
	   {#{code := PFcode}, _} -> S1#{code => PFcode};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{message := NFmessage}} ->
	  S2#{message => NFmessage};
      {#{message := PFmessage}, _} ->
	  S2#{message => PFmessage};
      _ -> S2
    end.

'merge_msg_grpc.testing.Payload'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S1#{type => NFtype};
	   {#{type := PFtype}, _} -> S1#{type => PFtype};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{body := NFbody}} -> S2#{body => NFbody};
      {#{body := PFbody}, _} -> S2#{body => PFbody};
      _ -> S2
    end.

'merge_msg_grpc.testing.BoolValue'(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

'merge_msg_grpc.testing.ResponseParameters'(PMsg, NMsg,
					    TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{size := NFsize}} -> S1#{size => NFsize};
	   {#{size := PFsize}, _} -> S1#{size => PFsize};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{interval_us := NFinterval_us}} ->
	       S2#{interval_us => NFinterval_us};
	   {#{interval_us := PFinterval_us}, _} ->
	       S2#{interval_us => PFinterval_us};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{compressed := PFcompressed},
       #{compressed := NFcompressed}} ->
	  S3#{compressed =>
		  'merge_msg_grpc.testing.BoolValue'(PFcompressed,
						     NFcompressed, TrUserData)};
      {_, #{compressed := NFcompressed}} ->
	  S3#{compressed => NFcompressed};
      {#{compressed := PFcompressed}, _} ->
	  S3#{compressed => PFcompressed};
      {_, _} -> S3
    end.

'merge_msg_grpc.testing.StreamingOutputCallRequest'(PMsg,
						    NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{response_type := NFresponse_type}} ->
	       S1#{response_type => NFresponse_type};
	   {#{response_type := PFresponse_type}, _} ->
	       S1#{response_type => PFresponse_type};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{response_parameters := PFresponse_parameters},
	    #{response_parameters := NFresponse_parameters}} ->
	       S2#{response_parameters =>
		       'erlang_++'(PFresponse_parameters,
				   NFresponse_parameters, TrUserData)};
	   {_, #{response_parameters := NFresponse_parameters}} ->
	       S2#{response_parameters => NFresponse_parameters};
	   {#{response_parameters := PFresponse_parameters}, _} ->
	       S2#{response_parameters => PFresponse_parameters};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{payload := PFpayload}, #{payload := NFpayload}} ->
	       S3#{payload =>
		       'merge_msg_grpc.testing.Payload'(PFpayload, NFpayload,
							TrUserData)};
	   {_, #{payload := NFpayload}} ->
	       S3#{payload => NFpayload};
	   {#{payload := PFpayload}, _} ->
	       S3#{payload => PFpayload};
	   {_, _} -> S3
	 end,
    case {PMsg, NMsg} of
      {#{response_status := PFresponse_status},
       #{response_status := NFresponse_status}} ->
	  S4#{response_status =>
		  'merge_msg_grpc.testing.EchoStatus'(PFresponse_status,
						      NFresponse_status,
						      TrUserData)};
      {_, #{response_status := NFresponse_status}} ->
	  S4#{response_status => NFresponse_status};
      {#{response_status := PFresponse_status}, _} ->
	  S4#{response_status => PFresponse_status};
      {_, _} -> S4
    end.

'merge_msg_grpc.testing.StreamingInputCallResponse'(PMsg,
						    NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_,
       #{aggregated_payload_size :=
	     NFaggregated_payload_size}} ->
	  S1#{aggregated_payload_size =>
		  NFaggregated_payload_size};
      {#{aggregated_payload_size :=
	     PFaggregated_payload_size},
       _} ->
	  S1#{aggregated_payload_size =>
		  PFaggregated_payload_size};
      _ -> S1
    end.

'merge_msg_grpc.testing.SimpleResponse'(PMsg, NMsg,
					TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{payload := PFpayload}, #{payload := NFpayload}} ->
	       S1#{payload =>
		       'merge_msg_grpc.testing.Payload'(PFpayload, NFpayload,
							TrUserData)};
	   {_, #{payload := NFpayload}} ->
	       S1#{payload => NFpayload};
	   {#{payload := PFpayload}, _} ->
	       S1#{payload => PFpayload};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{username := NFusername}} ->
	       S2#{username => NFusername};
	   {#{username := PFusername}, _} ->
	       S2#{username => PFusername};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{oauth_scope := NFoauth_scope}} ->
	  S3#{oauth_scope => NFoauth_scope};
      {#{oauth_scope := PFoauth_scope}, _} ->
	  S3#{oauth_scope => PFoauth_scope};
      _ -> S3
    end.

'merge_msg_grpc.testing.StreamingInputCallRequest'(PMsg,
						   NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{payload := PFpayload}, #{payload := NFpayload}} ->
	       S1#{payload =>
		       'merge_msg_grpc.testing.Payload'(PFpayload, NFpayload,
							TrUserData)};
	   {_, #{payload := NFpayload}} ->
	       S1#{payload => NFpayload};
	   {#{payload := PFpayload}, _} ->
	       S1#{payload => PFpayload};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{expect_compressed := PFexpect_compressed},
       #{expect_compressed := NFexpect_compressed}} ->
	  S2#{expect_compressed =>
		  'merge_msg_grpc.testing.BoolValue'(PFexpect_compressed,
						     NFexpect_compressed,
						     TrUserData)};
      {_, #{expect_compressed := NFexpect_compressed}} ->
	  S2#{expect_compressed => NFexpect_compressed};
      {#{expect_compressed := PFexpect_compressed}, _} ->
	  S2#{expect_compressed => PFexpect_compressed};
      {_, _} -> S2
    end.

'merge_msg_grpc.testing.SimpleRequest'(PMsg, NMsg,
				       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{response_type := NFresponse_type}} ->
	       S1#{response_type => NFresponse_type};
	   {#{response_type := PFresponse_type}, _} ->
	       S1#{response_type => PFresponse_type};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{response_size := NFresponse_size}} ->
	       S2#{response_size => NFresponse_size};
	   {#{response_size := PFresponse_size}, _} ->
	       S2#{response_size => PFresponse_size};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{payload := PFpayload}, #{payload := NFpayload}} ->
	       S3#{payload =>
		       'merge_msg_grpc.testing.Payload'(PFpayload, NFpayload,
							TrUserData)};
	   {_, #{payload := NFpayload}} ->
	       S3#{payload => NFpayload};
	   {#{payload := PFpayload}, _} ->
	       S3#{payload => PFpayload};
	   {_, _} -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{fill_username := NFfill_username}} ->
	       S4#{fill_username => NFfill_username};
	   {#{fill_username := PFfill_username}, _} ->
	       S4#{fill_username => PFfill_username};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{fill_oauth_scope := NFfill_oauth_scope}} ->
	       S5#{fill_oauth_scope => NFfill_oauth_scope};
	   {#{fill_oauth_scope := PFfill_oauth_scope}, _} ->
	       S5#{fill_oauth_scope => PFfill_oauth_scope};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {#{response_compressed := PFresponse_compressed},
	    #{response_compressed := NFresponse_compressed}} ->
	       S6#{response_compressed =>
		       'merge_msg_grpc.testing.BoolValue'(PFresponse_compressed,
							  NFresponse_compressed,
							  TrUserData)};
	   {_, #{response_compressed := NFresponse_compressed}} ->
	       S6#{response_compressed => NFresponse_compressed};
	   {#{response_compressed := PFresponse_compressed}, _} ->
	       S6#{response_compressed => PFresponse_compressed};
	   {_, _} -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {#{response_status := PFresponse_status},
	    #{response_status := NFresponse_status}} ->
	       S7#{response_status =>
		       'merge_msg_grpc.testing.EchoStatus'(PFresponse_status,
							   NFresponse_status,
							   TrUserData)};
	   {_, #{response_status := NFresponse_status}} ->
	       S7#{response_status => NFresponse_status};
	   {#{response_status := PFresponse_status}, _} ->
	       S7#{response_status => PFresponse_status};
	   {_, _} -> S7
	 end,
    case {PMsg, NMsg} of
      {#{expect_compressed := PFexpect_compressed},
       #{expect_compressed := NFexpect_compressed}} ->
	  S8#{expect_compressed =>
		  'merge_msg_grpc.testing.BoolValue'(PFexpect_compressed,
						     NFexpect_compressed,
						     TrUserData)};
      {_, #{expect_compressed := NFexpect_compressed}} ->
	  S8#{expect_compressed => NFexpect_compressed};
      {#{expect_compressed := PFexpect_compressed}, _} ->
	  S8#{expect_compressed => PFexpect_compressed};
      {_, _} -> S8
    end.

'merge_msg_grpc.testing.ReconnectInfo'(PMsg, NMsg,
				       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{passed := NFpassed}} -> S1#{passed => NFpassed};
	   {#{passed := PFpassed}, _} -> S1#{passed => PFpassed};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{backoff_ms := PFbackoff_ms},
       #{backoff_ms := NFbackoff_ms}} ->
	  S2#{backoff_ms =>
		  'erlang_++'(PFbackoff_ms, NFbackoff_ms, TrUserData)};
      {_, #{backoff_ms := NFbackoff_ms}} ->
	  S2#{backoff_ms => NFbackoff_ms};
      {#{backoff_ms := PFbackoff_ms}, _} ->
	  S2#{backoff_ms => PFbackoff_ms};
      {_, _} -> S2
    end.

'merge_msg_grpc.testing.StreamingOutputCallResponse'(PMsg,
						     NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{payload := PFpayload}, #{payload := NFpayload}} ->
	  S1#{payload =>
		  'merge_msg_grpc.testing.Payload'(PFpayload, NFpayload,
						   TrUserData)};
      {_, #{payload := NFpayload}} ->
	  S1#{payload => NFpayload};
      {#{payload := PFpayload}, _} ->
	  S1#{payload => PFpayload};
      {_, _} -> S1
    end.

'merge_msg_grpc.testing.ReconnectParams'(PMsg, NMsg,
					 _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_,
       #{max_reconnect_backoff_ms :=
	     NFmax_reconnect_backoff_ms}} ->
	  S1#{max_reconnect_backoff_ms =>
		  NFmax_reconnect_backoff_ms};
      {#{max_reconnect_backoff_ms :=
	     PFmax_reconnect_backoff_ms},
       _} ->
	  S1#{max_reconnect_backoff_ms =>
		  PFmax_reconnect_backoff_ms};
      _ -> S1
    end.


verify_msg(Msg, MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'grpc.testing.EchoStatus' ->
	  'v_msg_grpc.testing.EchoStatus'(Msg,
					  ['grpc.testing.EchoStatus'],
					  TrUserData);
      'grpc.testing.Payload' ->
	  'v_msg_grpc.testing.Payload'(Msg,
				       ['grpc.testing.Payload'], TrUserData);
      'grpc.testing.BoolValue' ->
	  'v_msg_grpc.testing.BoolValue'(Msg,
					 ['grpc.testing.BoolValue'],
					 TrUserData);
      'grpc.testing.ResponseParameters' ->
	  'v_msg_grpc.testing.ResponseParameters'(Msg,
						  ['grpc.testing.ResponseParameters'],
						  TrUserData);
      'grpc.testing.StreamingOutputCallRequest' ->
	  'v_msg_grpc.testing.StreamingOutputCallRequest'(Msg,
							  ['grpc.testing.StreamingOutputCallRequest'],
							  TrUserData);
      'grpc.testing.StreamingInputCallResponse' ->
	  'v_msg_grpc.testing.StreamingInputCallResponse'(Msg,
							  ['grpc.testing.StreamingInputCallResponse'],
							  TrUserData);
      'grpc.testing.SimpleResponse' ->
	  'v_msg_grpc.testing.SimpleResponse'(Msg,
					      ['grpc.testing.SimpleResponse'],
					      TrUserData);
      'grpc.testing.StreamingInputCallRequest' ->
	  'v_msg_grpc.testing.StreamingInputCallRequest'(Msg,
							 ['grpc.testing.StreamingInputCallRequest'],
							 TrUserData);
      'grpc.testing.SimpleRequest' ->
	  'v_msg_grpc.testing.SimpleRequest'(Msg,
					     ['grpc.testing.SimpleRequest'],
					     TrUserData);
      'grpc.testing.ReconnectInfo' ->
	  'v_msg_grpc.testing.ReconnectInfo'(Msg,
					     ['grpc.testing.ReconnectInfo'],
					     TrUserData);
      'grpc.testing.StreamingOutputCallResponse' ->
	  'v_msg_grpc.testing.StreamingOutputCallResponse'(Msg,
							   ['grpc.testing.StreamingOutputCallResponse'],
							   TrUserData);
      'grpc.testing.ReconnectParams' ->
	  'v_msg_grpc.testing.ReconnectParams'(Msg,
					       ['grpc.testing.ReconnectParams'],
					       TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,'v_msg_grpc.testing.EchoStatus'/3}).
'v_msg_grpc.testing.EchoStatus'(#{} = M, Path, _) ->
    case M of
      #{code := F1} -> v_type_int32(F1, [code | Path]);
      _ -> ok
    end,
    case M of
      #{message := F2} -> v_type_string(F2, [message | Path]);
      _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
		      (message) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_grpc.testing.EchoStatus'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'grpc.testing.EchoStatus'},
		  M, Path);
'v_msg_grpc.testing.EchoStatus'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'grpc.testing.EchoStatus'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_grpc.testing.Payload'/3}).
'v_msg_grpc.testing.Payload'(#{} = M, Path, _) ->
    case M of
      #{type := F1} ->
	  'v_enum_grpc.testing.PayloadType'(F1, [type | Path]);
      _ -> ok
    end,
    case M of
      #{body := F2} -> v_type_bytes(F2, [body | Path]);
      _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
		      (body) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_grpc.testing.Payload'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'grpc.testing.Payload'},
		  M, Path);
'v_msg_grpc.testing.Payload'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'grpc.testing.Payload'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_grpc.testing.BoolValue'/3}).
'v_msg_grpc.testing.BoolValue'(#{} = M, Path, _) ->
    case M of
      #{value := F1} -> v_type_bool(F1, [value | Path]);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_grpc.testing.BoolValue'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'grpc.testing.BoolValue'},
		  M, Path);
'v_msg_grpc.testing.BoolValue'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'grpc.testing.BoolValue'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_grpc.testing.ResponseParameters'/3}).
'v_msg_grpc.testing.ResponseParameters'(#{} = M, Path,
					TrUserData) ->
    case M of
      #{size := F1} -> v_type_int32(F1, [size | Path]);
      _ -> ok
    end,
    case M of
      #{interval_us := F2} ->
	  v_type_int32(F2, [interval_us | Path]);
      _ -> ok
    end,
    case M of
      #{compressed := F3} ->
	  'v_msg_grpc.testing.BoolValue'(F3, [compressed | Path],
					 TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (size) -> ok;
		      (interval_us) -> ok;
		      (compressed) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_grpc.testing.ResponseParameters'(M, Path,
					_TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'grpc.testing.ResponseParameters'},
		  M, Path);
'v_msg_grpc.testing.ResponseParameters'(X, Path,
					_TrUserData) ->
    mk_type_error({expected_msg,
		   'grpc.testing.ResponseParameters'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_grpc.testing.StreamingOutputCallRequest'/3}).
'v_msg_grpc.testing.StreamingOutputCallRequest'(#{} = M,
						Path, TrUserData) ->
    case M of
      #{response_type := F1} ->
	  'v_enum_grpc.testing.PayloadType'(F1,
					    [response_type | Path]);
      _ -> ok
    end,
    case M of
      #{response_parameters := F2} ->
	  if is_list(F2) ->
		 _ = ['v_msg_grpc.testing.ResponseParameters'(Elem,
							      [response_parameters
							       | Path],
							      TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of,
				{msg, 'grpc.testing.ResponseParameters'}},
			       F2, [response_parameters | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{payload := F3} ->
	  'v_msg_grpc.testing.Payload'(F3, [payload | Path],
				       TrUserData);
      _ -> ok
    end,
    case M of
      #{response_status := F4} ->
	  'v_msg_grpc.testing.EchoStatus'(F4,
					  [response_status | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (response_type) -> ok;
		      (response_parameters) -> ok;
		      (payload) -> ok;
		      (response_status) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_grpc.testing.StreamingOutputCallRequest'(M, Path,
						_TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'grpc.testing.StreamingOutputCallRequest'},
		  M, Path);
'v_msg_grpc.testing.StreamingOutputCallRequest'(X, Path,
						_TrUserData) ->
    mk_type_error({expected_msg,
		   'grpc.testing.StreamingOutputCallRequest'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_grpc.testing.StreamingInputCallResponse'/3}).
'v_msg_grpc.testing.StreamingInputCallResponse'(#{} = M,
						Path, _) ->
    case M of
      #{aggregated_payload_size := F1} ->
	  v_type_int32(F1, [aggregated_payload_size | Path]);
      _ -> ok
    end,
    lists:foreach(fun (aggregated_payload_size) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_grpc.testing.StreamingInputCallResponse'(M, Path,
						_TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'grpc.testing.StreamingInputCallResponse'},
		  M, Path);
'v_msg_grpc.testing.StreamingInputCallResponse'(X, Path,
						_TrUserData) ->
    mk_type_error({expected_msg,
		   'grpc.testing.StreamingInputCallResponse'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_grpc.testing.SimpleResponse'/3}).
'v_msg_grpc.testing.SimpleResponse'(#{} = M, Path,
				    TrUserData) ->
    case M of
      #{payload := F1} ->
	  'v_msg_grpc.testing.Payload'(F1, [payload | Path],
				       TrUserData);
      _ -> ok
    end,
    case M of
      #{username := F2} ->
	  v_type_string(F2, [username | Path]);
      _ -> ok
    end,
    case M of
      #{oauth_scope := F3} ->
	  v_type_string(F3, [oauth_scope | Path]);
      _ -> ok
    end,
    lists:foreach(fun (payload) -> ok;
		      (username) -> ok;
		      (oauth_scope) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_grpc.testing.SimpleResponse'(M, Path,
				    _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'grpc.testing.SimpleResponse'},
		  M, Path);
'v_msg_grpc.testing.SimpleResponse'(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'grpc.testing.SimpleResponse'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_grpc.testing.StreamingInputCallRequest'/3}).
'v_msg_grpc.testing.StreamingInputCallRequest'(#{} = M,
					       Path, TrUserData) ->
    case M of
      #{payload := F1} ->
	  'v_msg_grpc.testing.Payload'(F1, [payload | Path],
				       TrUserData);
      _ -> ok
    end,
    case M of
      #{expect_compressed := F2} ->
	  'v_msg_grpc.testing.BoolValue'(F2,
					 [expect_compressed | Path],
					 TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (payload) -> ok;
		      (expect_compressed) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_grpc.testing.StreamingInputCallRequest'(M, Path,
					       _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'grpc.testing.StreamingInputCallRequest'},
		  M, Path);
'v_msg_grpc.testing.StreamingInputCallRequest'(X, Path,
					       _TrUserData) ->
    mk_type_error({expected_msg,
		   'grpc.testing.StreamingInputCallRequest'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_grpc.testing.SimpleRequest'/3}).
'v_msg_grpc.testing.SimpleRequest'(#{} = M, Path,
				   TrUserData) ->
    case M of
      #{response_type := F1} ->
	  'v_enum_grpc.testing.PayloadType'(F1,
					    [response_type | Path]);
      _ -> ok
    end,
    case M of
      #{response_size := F2} ->
	  v_type_int32(F2, [response_size | Path]);
      _ -> ok
    end,
    case M of
      #{payload := F3} ->
	  'v_msg_grpc.testing.Payload'(F3, [payload | Path],
				       TrUserData);
      _ -> ok
    end,
    case M of
      #{fill_username := F4} ->
	  v_type_bool(F4, [fill_username | Path]);
      _ -> ok
    end,
    case M of
      #{fill_oauth_scope := F5} ->
	  v_type_bool(F5, [fill_oauth_scope | Path]);
      _ -> ok
    end,
    case M of
      #{response_compressed := F6} ->
	  'v_msg_grpc.testing.BoolValue'(F6,
					 [response_compressed | Path],
					 TrUserData);
      _ -> ok
    end,
    case M of
      #{response_status := F7} ->
	  'v_msg_grpc.testing.EchoStatus'(F7,
					  [response_status | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{expect_compressed := F8} ->
	  'v_msg_grpc.testing.BoolValue'(F8,
					 [expect_compressed | Path],
					 TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (response_type) -> ok;
		      (response_size) -> ok;
		      (payload) -> ok;
		      (fill_username) -> ok;
		      (fill_oauth_scope) -> ok;
		      (response_compressed) -> ok;
		      (response_status) -> ok;
		      (expect_compressed) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_grpc.testing.SimpleRequest'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'grpc.testing.SimpleRequest'},
		  M, Path);
'v_msg_grpc.testing.SimpleRequest'(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   'grpc.testing.SimpleRequest'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_grpc.testing.ReconnectInfo'/3}).
'v_msg_grpc.testing.ReconnectInfo'(#{} = M, Path, _) ->
    case M of
      #{passed := F1} -> v_type_bool(F1, [passed | Path]);
      _ -> ok
    end,
    case M of
      #{backoff_ms := F2} ->
	  if is_list(F2) ->
		 _ = [v_type_int32(Elem, [backoff_ms | Path])
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, int32}, F2,
			       [backoff_ms | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (passed) -> ok;
		      (backoff_ms) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_grpc.testing.ReconnectInfo'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'grpc.testing.ReconnectInfo'},
		  M, Path);
'v_msg_grpc.testing.ReconnectInfo'(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   'grpc.testing.ReconnectInfo'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_grpc.testing.StreamingOutputCallResponse'/3}).
'v_msg_grpc.testing.StreamingOutputCallResponse'(#{} =
						     M,
						 Path, TrUserData) ->
    case M of
      #{payload := F1} ->
	  'v_msg_grpc.testing.Payload'(F1, [payload | Path],
				       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (payload) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_grpc.testing.StreamingOutputCallResponse'(M,
						 Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'grpc.testing.StreamingOutputCallResponse'},
		  M, Path);
'v_msg_grpc.testing.StreamingOutputCallResponse'(X,
						 Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'grpc.testing.StreamingOutputCallResponse'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_grpc.testing.ReconnectParams'/3}).
'v_msg_grpc.testing.ReconnectParams'(#{} = M, Path,
				     _) ->
    case M of
      #{max_reconnect_backoff_ms := F1} ->
	  v_type_int32(F1, [max_reconnect_backoff_ms | Path]);
      _ -> ok
    end,
    lists:foreach(fun (max_reconnect_backoff_ms) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_grpc.testing.ReconnectParams'(M, Path,
				     _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'grpc.testing.ReconnectParams'},
		  M, Path);
'v_msg_grpc.testing.ReconnectParams'(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'grpc.testing.ReconnectParams'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_grpc.testing.PayloadType'/2}).
'v_enum_grpc.testing.PayloadType'('COMPRESSABLE',
				  _Path) ->
    ok;
'v_enum_grpc.testing.PayloadType'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_grpc.testing.PayloadType'(X, Path) ->
    mk_type_error({invalid_enum,
		   'grpc.testing.PayloadType'},
		  X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'grpc.testing.PayloadType'},
      [{'COMPRESSABLE', 0}]},
     {{msg, 'grpc.testing.EchoStatus'},
      [#{name => code, fnum => 1, rnum => 2, type => int32,
	 occurrence => optional, opts => []},
       #{name => message, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'grpc.testing.Payload'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'grpc.testing.PayloadType'},
	 occurrence => optional, opts => []},
       #{name => body, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, 'grpc.testing.BoolValue'},
      [#{name => value, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, 'grpc.testing.ResponseParameters'},
      [#{name => size, fnum => 1, rnum => 2, type => int32,
	 occurrence => optional, opts => []},
       #{name => interval_us, fnum => 2, rnum => 3,
	 type => int32, occurrence => optional, opts => []},
       #{name => compressed, fnum => 3, rnum => 4,
	 type => {msg, 'grpc.testing.BoolValue'},
	 occurrence => optional, opts => []}]},
     {{msg, 'grpc.testing.StreamingOutputCallRequest'},
      [#{name => response_type, fnum => 1, rnum => 2,
	 type => {enum, 'grpc.testing.PayloadType'},
	 occurrence => optional, opts => []},
       #{name => response_parameters, fnum => 2, rnum => 3,
	 type => {msg, 'grpc.testing.ResponseParameters'},
	 occurrence => repeated, opts => []},
       #{name => payload, fnum => 3, rnum => 4,
	 type => {msg, 'grpc.testing.Payload'},
	 occurrence => optional, opts => []},
       #{name => response_status, fnum => 7, rnum => 5,
	 type => {msg, 'grpc.testing.EchoStatus'},
	 occurrence => optional, opts => []}]},
     {{msg, 'grpc.testing.StreamingInputCallResponse'},
      [#{name => aggregated_payload_size, fnum => 1,
	 rnum => 2, type => int32, occurrence => optional,
	 opts => []}]},
     {{msg, 'grpc.testing.SimpleResponse'},
      [#{name => payload, fnum => 1, rnum => 2,
	 type => {msg, 'grpc.testing.Payload'},
	 occurrence => optional, opts => []},
       #{name => username, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => oauth_scope, fnum => 3, rnum => 4,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'grpc.testing.StreamingInputCallRequest'},
      [#{name => payload, fnum => 1, rnum => 2,
	 type => {msg, 'grpc.testing.Payload'},
	 occurrence => optional, opts => []},
       #{name => expect_compressed, fnum => 2, rnum => 3,
	 type => {msg, 'grpc.testing.BoolValue'},
	 occurrence => optional, opts => []}]},
     {{msg, 'grpc.testing.SimpleRequest'},
      [#{name => response_type, fnum => 1, rnum => 2,
	 type => {enum, 'grpc.testing.PayloadType'},
	 occurrence => optional, opts => []},
       #{name => response_size, fnum => 2, rnum => 3,
	 type => int32, occurrence => optional, opts => []},
       #{name => payload, fnum => 3, rnum => 4,
	 type => {msg, 'grpc.testing.Payload'},
	 occurrence => optional, opts => []},
       #{name => fill_username, fnum => 4, rnum => 5,
	 type => bool, occurrence => optional, opts => []},
       #{name => fill_oauth_scope, fnum => 5, rnum => 6,
	 type => bool, occurrence => optional, opts => []},
       #{name => response_compressed, fnum => 6, rnum => 7,
	 type => {msg, 'grpc.testing.BoolValue'},
	 occurrence => optional, opts => []},
       #{name => response_status, fnum => 7, rnum => 8,
	 type => {msg, 'grpc.testing.EchoStatus'},
	 occurrence => optional, opts => []},
       #{name => expect_compressed, fnum => 8, rnum => 9,
	 type => {msg, 'grpc.testing.BoolValue'},
	 occurrence => optional, opts => []}]},
     {{msg, 'grpc.testing.ReconnectInfo'},
      [#{name => passed, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []},
       #{name => backoff_ms, fnum => 2, rnum => 3,
	 type => int32, occurrence => repeated,
	 opts => [packed]}]},
     {{msg, 'grpc.testing.StreamingOutputCallResponse'},
      [#{name => payload, fnum => 1, rnum => 2,
	 type => {msg, 'grpc.testing.Payload'},
	 occurrence => optional, opts => []}]},
     {{msg, 'grpc.testing.ReconnectParams'},
      [#{name => max_reconnect_backoff_ms, fnum => 1,
	 rnum => 2, type => int32, occurrence => optional,
	 opts => []}]}].


get_msg_names() ->
    ['grpc.testing.EchoStatus', 'grpc.testing.Payload',
     'grpc.testing.BoolValue',
     'grpc.testing.ResponseParameters',
     'grpc.testing.StreamingOutputCallRequest',
     'grpc.testing.StreamingInputCallResponse',
     'grpc.testing.SimpleResponse',
     'grpc.testing.StreamingInputCallRequest',
     'grpc.testing.SimpleRequest',
     'grpc.testing.ReconnectInfo',
     'grpc.testing.StreamingOutputCallResponse',
     'grpc.testing.ReconnectParams'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['grpc.testing.EchoStatus', 'grpc.testing.Payload',
     'grpc.testing.BoolValue',
     'grpc.testing.ResponseParameters',
     'grpc.testing.StreamingOutputCallRequest',
     'grpc.testing.StreamingInputCallResponse',
     'grpc.testing.SimpleResponse',
     'grpc.testing.StreamingInputCallRequest',
     'grpc.testing.SimpleRequest',
     'grpc.testing.ReconnectInfo',
     'grpc.testing.StreamingOutputCallResponse',
     'grpc.testing.ReconnectParams'].


get_enum_names() -> ['grpc.testing.PayloadType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('grpc.testing.EchoStatus') ->
    [#{name => code, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []},
     #{name => message, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('grpc.testing.Payload') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'grpc.testing.PayloadType'},
       occurrence => optional, opts => []},
     #{name => body, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def('grpc.testing.BoolValue') ->
    [#{name => value, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []}];
find_msg_def('grpc.testing.ResponseParameters') ->
    [#{name => size, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []},
     #{name => interval_us, fnum => 2, rnum => 3,
       type => int32, occurrence => optional, opts => []},
     #{name => compressed, fnum => 3, rnum => 4,
       type => {msg, 'grpc.testing.BoolValue'},
       occurrence => optional, opts => []}];
find_msg_def('grpc.testing.StreamingOutputCallRequest') ->
    [#{name => response_type, fnum => 1, rnum => 2,
       type => {enum, 'grpc.testing.PayloadType'},
       occurrence => optional, opts => []},
     #{name => response_parameters, fnum => 2, rnum => 3,
       type => {msg, 'grpc.testing.ResponseParameters'},
       occurrence => repeated, opts => []},
     #{name => payload, fnum => 3, rnum => 4,
       type => {msg, 'grpc.testing.Payload'},
       occurrence => optional, opts => []},
     #{name => response_status, fnum => 7, rnum => 5,
       type => {msg, 'grpc.testing.EchoStatus'},
       occurrence => optional, opts => []}];
find_msg_def('grpc.testing.StreamingInputCallResponse') ->
    [#{name => aggregated_payload_size, fnum => 1,
       rnum => 2, type => int32, occurrence => optional,
       opts => []}];
find_msg_def('grpc.testing.SimpleResponse') ->
    [#{name => payload, fnum => 1, rnum => 2,
       type => {msg, 'grpc.testing.Payload'},
       occurrence => optional, opts => []},
     #{name => username, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => oauth_scope, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []}];
find_msg_def('grpc.testing.StreamingInputCallRequest') ->
    [#{name => payload, fnum => 1, rnum => 2,
       type => {msg, 'grpc.testing.Payload'},
       occurrence => optional, opts => []},
     #{name => expect_compressed, fnum => 2, rnum => 3,
       type => {msg, 'grpc.testing.BoolValue'},
       occurrence => optional, opts => []}];
find_msg_def('grpc.testing.SimpleRequest') ->
    [#{name => response_type, fnum => 1, rnum => 2,
       type => {enum, 'grpc.testing.PayloadType'},
       occurrence => optional, opts => []},
     #{name => response_size, fnum => 2, rnum => 3,
       type => int32, occurrence => optional, opts => []},
     #{name => payload, fnum => 3, rnum => 4,
       type => {msg, 'grpc.testing.Payload'},
       occurrence => optional, opts => []},
     #{name => fill_username, fnum => 4, rnum => 5,
       type => bool, occurrence => optional, opts => []},
     #{name => fill_oauth_scope, fnum => 5, rnum => 6,
       type => bool, occurrence => optional, opts => []},
     #{name => response_compressed, fnum => 6, rnum => 7,
       type => {msg, 'grpc.testing.BoolValue'},
       occurrence => optional, opts => []},
     #{name => response_status, fnum => 7, rnum => 8,
       type => {msg, 'grpc.testing.EchoStatus'},
       occurrence => optional, opts => []},
     #{name => expect_compressed, fnum => 8, rnum => 9,
       type => {msg, 'grpc.testing.BoolValue'},
       occurrence => optional, opts => []}];
find_msg_def('grpc.testing.ReconnectInfo') ->
    [#{name => passed, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []},
     #{name => backoff_ms, fnum => 2, rnum => 3,
       type => int32, occurrence => repeated,
       opts => [packed]}];
find_msg_def('grpc.testing.StreamingOutputCallResponse') ->
    [#{name => payload, fnum => 1, rnum => 2,
       type => {msg, 'grpc.testing.Payload'},
       occurrence => optional, opts => []}];
find_msg_def('grpc.testing.ReconnectParams') ->
    [#{name => max_reconnect_backoff_ms, fnum => 1,
       rnum => 2, type => int32, occurrence => optional,
       opts => []}];
find_msg_def(_) -> error.


find_enum_def('grpc.testing.PayloadType') ->
    [{'COMPRESSABLE', 0}];
find_enum_def(_) -> error.


enum_symbol_by_value('grpc.testing.PayloadType',
		     Value) ->
    'enum_symbol_by_value_grpc.testing.PayloadType'(Value).


enum_value_by_symbol('grpc.testing.PayloadType', Sym) ->
    'enum_value_by_symbol_grpc.testing.PayloadType'(Sym).


'enum_symbol_by_value_grpc.testing.PayloadType'(0) ->
    'COMPRESSABLE'.


'enum_value_by_symbol_grpc.testing.PayloadType'('COMPRESSABLE') ->
    0.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'grpc.testing'.



gpb_version_as_string() ->
    "4.0.2".

gpb_version_as_list() ->
    [4,0,2].
