%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.0.2
-module(route_guide_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'routeguide.Point'() ::
      #{latitude                => integer(),       % = 1, 32 bits
        longitude               => integer()        % = 2, 32 bits
       }.
-type 'routeguide.Feature'() ::
      #{name                    => iodata(),        % = 1
        location                => 'routeguide.Point'() % = 2
       }.
-type 'routeguide.RouteNote'() ::
      #{location                => 'routeguide.Point'(), % = 1
        message                 => iodata()         % = 2
       }.
-type 'routeguide.RouteSummary'() ::
      #{point_count             => integer(),       % = 1, 32 bits
        feature_count           => integer(),       % = 2, 32 bits
        distance                => integer(),       % = 3, 32 bits
        elapsed_time            => integer()        % = 4, 32 bits
       }.
-type 'routeguide.Rectangle'() ::
      #{lo                      => 'routeguide.Point'(), % = 1
        hi                      => 'routeguide.Point'() % = 2
       }.
-export_type(['routeguide.Point'/0, 'routeguide.Feature'/0, 'routeguide.RouteNote'/0, 'routeguide.RouteSummary'/0, 'routeguide.Rectangle'/0]).

-spec encode_msg('routeguide.Point'() | 'routeguide.Feature'() | 'routeguide.RouteNote'() | 'routeguide.RouteSummary'() | 'routeguide.Rectangle'(),'routeguide.Point' | 'routeguide.Feature' | 'routeguide.RouteNote' | 'routeguide.RouteSummary' | 'routeguide.Rectangle') -> binary().
encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


-spec encode_msg('routeguide.Point'() | 'routeguide.Feature'() | 'routeguide.RouteNote'() | 'routeguide.RouteSummary'() | 'routeguide.Rectangle'(),'routeguide.Point' | 'routeguide.Feature' | 'routeguide.RouteNote' | 'routeguide.RouteSummary' | 'routeguide.Rectangle', list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'routeguide.Point' ->
	  'e_msg_routeguide.Point'(Msg, TrUserData);
      'routeguide.Feature' ->
	  'e_msg_routeguide.Feature'(Msg, TrUserData);
      'routeguide.RouteNote' ->
	  'e_msg_routeguide.RouteNote'(Msg, TrUserData);
      'routeguide.RouteSummary' ->
	  'e_msg_routeguide.RouteSummary'(Msg, TrUserData);
      'routeguide.Rectangle' ->
	  'e_msg_routeguide.Rectangle'(Msg, TrUserData)
    end.



'e_msg_routeguide.Point'(Msg, TrUserData) ->
    'e_msg_routeguide.Point'(Msg, <<>>, TrUserData).


'e_msg_routeguide.Point'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{latitude := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{longitude := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true -> e_type_int32(TrF2, <<B1/binary, 16>>)
	    end
	  end;
      _ -> B1
    end.

'e_msg_routeguide.Feature'(Msg, TrUserData) ->
    'e_msg_routeguide.Feature'(Msg, <<>>, TrUserData).


'e_msg_routeguide.Feature'(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{location := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   'e_mfield_routeguide.Feature_location'(TrF2,
							  <<B1/binary, 18>>,
							  TrUserData)
	    end
	  end;
      _ -> B1
    end.

'e_msg_routeguide.RouteNote'(Msg, TrUserData) ->
    'e_msg_routeguide.RouteNote'(Msg, <<>>, TrUserData).


'e_msg_routeguide.RouteNote'(#{} = M, Bin,
			     TrUserData) ->
    B1 = case M of
	   #{location := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			'e_mfield_routeguide.RouteNote_location'(TrF1,
								 <<Bin/binary,
								   10>>,
								 TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{message := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false -> e_type_string(TrF2, <<B1/binary, 18>>)
	    end
	  end;
      _ -> B1
    end.

'e_msg_routeguide.RouteSummary'(Msg, TrUserData) ->
    'e_msg_routeguide.RouteSummary'(Msg, <<>>, TrUserData).


'e_msg_routeguide.RouteSummary'(#{} = M, Bin,
				TrUserData) ->
    B1 = case M of
	   #{point_count := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{feature_count := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_type_int32(TrF2, <<B1/binary, 16>>)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{distance := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true -> e_type_int32(TrF3, <<B2/binary, 24>>)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{elapsed_time := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    if TrF4 =:= 0 -> B3;
	       true -> e_type_int32(TrF4, <<B3/binary, 32>>)
	    end
	  end;
      _ -> B3
    end.

'e_msg_routeguide.Rectangle'(Msg, TrUserData) ->
    'e_msg_routeguide.Rectangle'(Msg, <<>>, TrUserData).


'e_msg_routeguide.Rectangle'(#{} = M, Bin,
			     TrUserData) ->
    B1 = case M of
	   #{lo := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			'e_mfield_routeguide.Rectangle_lo'(TrF1,
							   <<Bin/binary, 10>>,
							   TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{hi := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   'e_mfield_routeguide.Rectangle_hi'(TrF2,
						      <<B1/binary, 18>>,
						      TrUserData)
	    end
	  end;
      _ -> B1
    end.

'e_mfield_routeguide.Feature_location'(Msg, Bin,
				       TrUserData) ->
    SubBin = 'e_msg_routeguide.Point'(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_routeguide.RouteNote_location'(Msg, Bin,
					 TrUserData) ->
    SubBin = 'e_msg_routeguide.Point'(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_routeguide.Rectangle_lo'(Msg, Bin,
				   TrUserData) ->
    SubBin = 'e_msg_routeguide.Point'(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_routeguide.Rectangle_hi'(Msg, Bin,
				   TrUserData) ->
    SubBin = 'e_msg_routeguide.Point'(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'routeguide.Point' ->
	  try 'd_msg_routeguide.Point'(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'routeguide.Point',
			 {Class, Reason, StackTrace}}}})
	  end;
      'routeguide.Feature' ->
	  try 'd_msg_routeguide.Feature'(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'routeguide.Feature',
			 {Class, Reason, StackTrace}}}})
	  end;
      'routeguide.RouteNote' ->
	  try 'd_msg_routeguide.RouteNote'(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'routeguide.RouteNote',
			 {Class, Reason, StackTrace}}}})
	  end;
      'routeguide.RouteSummary' ->
	  try 'd_msg_routeguide.RouteSummary'(Bin, TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'routeguide.RouteSummary',
			 {Class, Reason, StackTrace}}}})
	  end;
      'routeguide.Rectangle' ->
	  try 'd_msg_routeguide.Rectangle'(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'routeguide.Rectangle',
			 {Class, Reason, StackTrace}}}})
	  end
    end.



'd_msg_routeguide.Point'(Bin, TrUserData) ->
    'dfp_read_field_def_routeguide.Point'(Bin, 0, 0,
					  id(0, TrUserData), id(0, TrUserData),
					  TrUserData).

'dfp_read_field_def_routeguide.Point'(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_routeguide.Point_latitude'(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
'dfp_read_field_def_routeguide.Point'(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_routeguide.Point_longitude'(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
'dfp_read_field_def_routeguide.Point'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{latitude => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{longitude => F@_2}
    end;
'dfp_read_field_def_routeguide.Point'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_routeguide.Point'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_routeguide.Point'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_routeguide.Point'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_routeguide.Point'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_routeguide.Point_latitude'(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      16 ->
	  'd_field_routeguide.Point_longitude'(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_routeguide.Point'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_routeguide.Point'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_routeguide.Point'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_routeguide.Point'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_routeguide.Point'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_routeguide.Point'(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{latitude => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{longitude => F@_2}
    end.

'd_field_routeguide.Point_latitude'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_routeguide.Point_latitude'(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_routeguide.Point_latitude'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'dfp_read_field_def_routeguide.Point'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_routeguide.Point_longitude'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_routeguide.Point_longitude'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_routeguide.Point_longitude'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'dfp_read_field_def_routeguide.Point'(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

'skip_varint_routeguide.Point'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_routeguide.Point'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_routeguide.Point'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_routeguide.Point'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_routeguide.Point'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_routeguide.Point'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_routeguide.Point'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_routeguide.Point'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_routeguide.Point'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_routeguide.Point'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_routeguide.Point'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_routeguide.Point'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_routeguide.Point'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_routeguide.Point'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'd_msg_routeguide.Feature'(Bin, TrUserData) ->
    'dfp_read_field_def_routeguide.Feature'(Bin, 0, 0,
					    id(<<>>, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

'dfp_read_field_def_routeguide.Feature'(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_routeguide.Feature_name'(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
'dfp_read_field_def_routeguide.Feature'(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_routeguide.Feature_location'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
'dfp_read_field_def_routeguide.Feature'(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{name => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{location => F@_2}
    end;
'dfp_read_field_def_routeguide.Feature'(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_routeguide.Feature'(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'dg_read_field_def_routeguide.Feature'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_routeguide.Feature'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
'dg_read_field_def_routeguide.Feature'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_routeguide.Feature_name'(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      18 ->
	  'd_field_routeguide.Feature_location'(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_routeguide.Feature'(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		'skip_64_routeguide.Feature'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		'skip_length_delimited_routeguide.Feature'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		'skip_group_routeguide.Feature'(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_routeguide.Feature'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
'dg_read_field_def_routeguide.Feature'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{name => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{location => F@_2}
    end.

'd_field_routeguide.Feature_name'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_routeguide.Feature_name'(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_routeguide.Feature_name'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    'dfp_read_field_def_routeguide.Feature'(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

'd_field_routeguide.Feature_location'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_routeguide.Feature_location'(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
'd_field_routeguide.Feature_location'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_routeguide.Point'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_routeguide.Feature'(RestF, 0, 0,
					    F@_1,
					    if Prev == '$undef' -> NewFValue;
					       true ->
						   'merge_msg_routeguide.Point'(Prev,
										NewFValue,
										TrUserData)
					    end,
					    TrUserData).

'skip_varint_routeguide.Feature'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_routeguide.Feature'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'skip_varint_routeguide.Feature'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_routeguide.Feature'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_length_delimited_routeguide.Feature'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_routeguide.Feature'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
'skip_length_delimited_routeguide.Feature'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_routeguide.Feature'(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

'skip_group_routeguide.Feature'(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_routeguide.Feature'(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

'skip_32_routeguide.Feature'(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_routeguide.Feature'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_64_routeguide.Feature'(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_routeguide.Feature'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'd_msg_routeguide.RouteNote'(Bin, TrUserData) ->
    'dfp_read_field_def_routeguide.RouteNote'(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_routeguide.RouteNote'(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_routeguide.RouteNote_location'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
'dfp_read_field_def_routeguide.RouteNote'(<<18,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_routeguide.RouteNote_message'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
'dfp_read_field_def_routeguide.RouteNote'(<<>>, 0, 0,
					  F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{location => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{message => F@_2}
    end;
'dfp_read_field_def_routeguide.RouteNote'(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_routeguide.RouteNote'(Other, Z1, Z2,
					     F@_1, F@_2, TrUserData).

'dg_read_field_def_routeguide.RouteNote'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_routeguide.RouteNote'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'dg_read_field_def_routeguide.RouteNote'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_routeguide.RouteNote_location'(Rest, 0, 0,
						  F@_1, F@_2, TrUserData);
      18 ->
	  'd_field_routeguide.RouteNote_message'(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_routeguide.RouteNote'(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    1 ->
		'skip_64_routeguide.RouteNote'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    2 ->
		'skip_length_delimited_routeguide.RouteNote'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    3 ->
		'skip_group_routeguide.RouteNote'(Rest, Key bsr 3, 0,
						  F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_routeguide.RouteNote'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData)
	  end
    end;
'dg_read_field_def_routeguide.RouteNote'(<<>>, 0, 0,
					 F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{location => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{message => F@_2}
    end.

'd_field_routeguide.RouteNote_location'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_routeguide.RouteNote_location'(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
'd_field_routeguide.RouteNote_location'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_routeguide.Point'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_routeguide.RouteNote'(RestF, 0, 0,
					      if Prev == '$undef' -> NewFValue;
						 true ->
						     'merge_msg_routeguide.Point'(Prev,
										  NewFValue,
										  TrUserData)
					      end,
					      F@_2, TrUserData).

'd_field_routeguide.RouteNote_message'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_routeguide.RouteNote_message'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
'd_field_routeguide.RouteNote_message'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    'dfp_read_field_def_routeguide.RouteNote'(RestF, 0, 0,
					      F@_1, NewFValue, TrUserData).

'skip_varint_routeguide.RouteNote'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_routeguide.RouteNote'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
'skip_varint_routeguide.RouteNote'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_routeguide.RouteNote'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

'skip_length_delimited_routeguide.RouteNote'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_routeguide.RouteNote'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
'skip_length_delimited_routeguide.RouteNote'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_routeguide.RouteNote'(Rest2, 0, 0,
					      F@_1, F@_2, TrUserData).

'skip_group_routeguide.RouteNote'(Bin, FNum, Z2, F@_1,
				  F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_routeguide.RouteNote'(Rest, 0, Z2,
					      F@_1, F@_2, TrUserData).

'skip_32_routeguide.RouteNote'(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_routeguide.RouteNote'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

'skip_64_routeguide.RouteNote'(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_routeguide.RouteNote'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

'd_msg_routeguide.RouteSummary'(Bin, TrUserData) ->
    'dfp_read_field_def_routeguide.RouteSummary'(Bin, 0, 0,
						 id(0, TrUserData),
						 id(0, TrUserData),
						 id(0, TrUserData),
						 id(0, TrUserData), TrUserData).

'dfp_read_field_def_routeguide.RouteSummary'(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     TrUserData) ->
    'd_field_routeguide.RouteSummary_point_count'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
'dfp_read_field_def_routeguide.RouteSummary'(<<16,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     TrUserData) ->
    'd_field_routeguide.RouteSummary_feature_count'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, TrUserData);
'dfp_read_field_def_routeguide.RouteSummary'(<<24,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     TrUserData) ->
    'd_field_routeguide.RouteSummary_distance'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData);
'dfp_read_field_def_routeguide.RouteSummary'(<<32,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     TrUserData) ->
    'd_field_routeguide.RouteSummary_elapsed_time'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
'dfp_read_field_def_routeguide.RouteSummary'(<<>>, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{point_count => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{feature_count => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{distance => F@_3}
	 end,
    if F@_4 == '$undef' -> S4;
       true -> S4#{elapsed_time => F@_4}
    end;
'dfp_read_field_def_routeguide.RouteSummary'(Other, Z1,
					     Z2, F@_1, F@_2, F@_3, F@_4,
					     TrUserData) ->
    'dg_read_field_def_routeguide.RouteSummary'(Other, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						TrUserData).

'dg_read_field_def_routeguide.RouteSummary'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_routeguide.RouteSummary'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, TrUserData);
'dg_read_field_def_routeguide.RouteSummary'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_routeguide.RouteSummary_point_count'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, TrUserData);
      16 ->
	  'd_field_routeguide.RouteSummary_feature_count'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, TrUserData);
      24 ->
	  'd_field_routeguide.RouteSummary_distance'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     TrUserData);
      32 ->
	  'd_field_routeguide.RouteSummary_elapsed_time'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_routeguide.RouteSummary'(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4,
						      TrUserData);
	    1 ->
		'skip_64_routeguide.RouteSummary'(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
	    2 ->
		'skip_length_delimited_routeguide.RouteSummary'(Rest, 0,
								0, F@_1, F@_2,
								F@_3, F@_4,
								TrUserData);
	    3 ->
		'skip_group_routeguide.RouteSummary'(Rest, Key bsr 3, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     TrUserData);
	    5 ->
		'skip_32_routeguide.RouteSummary'(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, TrUserData)
	  end
    end;
'dg_read_field_def_routeguide.RouteSummary'(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{point_count => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{feature_count => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{distance => F@_3}
	 end,
    if F@_4 == '$undef' -> S4;
       true -> S4#{elapsed_time => F@_4}
    end.

'd_field_routeguide.RouteSummary_point_count'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData)
    when N < 57 ->
    'd_field_routeguide.RouteSummary_point_count'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
'd_field_routeguide.RouteSummary_point_count'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F@_2, F@_3, F@_4,
					      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'dfp_read_field_def_routeguide.RouteSummary'(RestF, 0,
						 0, NewFValue, F@_2, F@_3, F@_4,
						 TrUserData).

'd_field_routeguide.RouteSummary_feature_count'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						TrUserData)
    when N < 57 ->
    'd_field_routeguide.RouteSummary_feature_count'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
'd_field_routeguide.RouteSummary_feature_count'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, F@_3, F@_4,
						TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'dfp_read_field_def_routeguide.RouteSummary'(RestF, 0,
						 0, F@_1, NewFValue, F@_3, F@_4,
						 TrUserData).

'd_field_routeguide.RouteSummary_distance'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4,
					   TrUserData)
    when N < 57 ->
    'd_field_routeguide.RouteSummary_distance'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, TrUserData);
'd_field_routeguide.RouteSummary_distance'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, _, F@_4,
					   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'dfp_read_field_def_routeguide.RouteSummary'(RestF, 0,
						 0, F@_1, F@_2, NewFValue, F@_4,
						 TrUserData).

'd_field_routeguide.RouteSummary_elapsed_time'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       TrUserData)
    when N < 57 ->
    'd_field_routeguide.RouteSummary_elapsed_time'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4,
						   TrUserData);
'd_field_routeguide.RouteSummary_elapsed_time'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, _,
					       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    'dfp_read_field_def_routeguide.RouteSummary'(RestF, 0,
						 0, F@_1, F@_2, F@_3, NewFValue,
						 TrUserData).

'skip_varint_routeguide.RouteSummary'(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    'skip_varint_routeguide.RouteSummary'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_routeguide.RouteSummary'(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    'dfp_read_field_def_routeguide.RouteSummary'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData).

'skip_length_delimited_routeguide.RouteSummary'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						TrUserData)
    when N < 57 ->
    'skip_length_delimited_routeguide.RouteSummary'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
'skip_length_delimited_routeguide.RouteSummary'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_routeguide.RouteSummary'(Rest2, 0,
						 0, F@_1, F@_2, F@_3, F@_4,
						 TrUserData).

'skip_group_routeguide.RouteSummary'(Bin, FNum, Z2,
				     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_routeguide.RouteSummary'(Rest, 0,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData).

'skip_32_routeguide.RouteSummary'(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dfp_read_field_def_routeguide.RouteSummary'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData).

'skip_64_routeguide.RouteSummary'(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dfp_read_field_def_routeguide.RouteSummary'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData).

'd_msg_routeguide.Rectangle'(Bin, TrUserData) ->
    'dfp_read_field_def_routeguide.Rectangle'(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      TrUserData).

'dfp_read_field_def_routeguide.Rectangle'(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_routeguide.Rectangle_lo'(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
'dfp_read_field_def_routeguide.Rectangle'(<<18,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_routeguide.Rectangle_hi'(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
'dfp_read_field_def_routeguide.Rectangle'(<<>>, 0, 0,
					  F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{lo => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{hi => F@_2}
    end;
'dfp_read_field_def_routeguide.Rectangle'(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_routeguide.Rectangle'(Other, Z1, Z2,
					     F@_1, F@_2, TrUserData).

'dg_read_field_def_routeguide.Rectangle'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_routeguide.Rectangle'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'dg_read_field_def_routeguide.Rectangle'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_routeguide.Rectangle_lo'(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      18 ->
	  'd_field_routeguide.Rectangle_hi'(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_routeguide.Rectangle'(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    1 ->
		'skip_64_routeguide.Rectangle'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    2 ->
		'skip_length_delimited_routeguide.Rectangle'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    3 ->
		'skip_group_routeguide.Rectangle'(Rest, Key bsr 3, 0,
						  F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_routeguide.Rectangle'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData)
	  end
    end;
'dg_read_field_def_routeguide.Rectangle'(<<>>, 0, 0,
					 F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{lo => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{hi => F@_2}
    end.

'd_field_routeguide.Rectangle_lo'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_routeguide.Rectangle_lo'(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_routeguide.Rectangle_lo'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_routeguide.Point'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_routeguide.Rectangle'(RestF, 0, 0,
					      if Prev == '$undef' -> NewFValue;
						 true ->
						     'merge_msg_routeguide.Point'(Prev,
										  NewFValue,
										  TrUserData)
					      end,
					      F@_2, TrUserData).

'd_field_routeguide.Rectangle_hi'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_routeguide.Rectangle_hi'(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_routeguide.Rectangle_hi'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_routeguide.Point'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_routeguide.Rectangle'(RestF, 0, 0,
					      F@_1,
					      if Prev == '$undef' -> NewFValue;
						 true ->
						     'merge_msg_routeguide.Point'(Prev,
										  NewFValue,
										  TrUserData)
					      end,
					      TrUserData).

'skip_varint_routeguide.Rectangle'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_routeguide.Rectangle'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
'skip_varint_routeguide.Rectangle'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_routeguide.Rectangle'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

'skip_length_delimited_routeguide.Rectangle'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_routeguide.Rectangle'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
'skip_length_delimited_routeguide.Rectangle'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_routeguide.Rectangle'(Rest2, 0, 0,
					      F@_1, F@_2, TrUserData).

'skip_group_routeguide.Rectangle'(Bin, FNum, Z2, F@_1,
				  F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_routeguide.Rectangle'(Rest, 0, Z2,
					      F@_1, F@_2, TrUserData).

'skip_32_routeguide.Rectangle'(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_routeguide.Rectangle'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

'skip_64_routeguide.Rectangle'(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_routeguide.Rectangle'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'routeguide.Point' ->
	  'merge_msg_routeguide.Point'(Prev, New, TrUserData);
      'routeguide.Feature' ->
	  'merge_msg_routeguide.Feature'(Prev, New, TrUserData);
      'routeguide.RouteNote' ->
	  'merge_msg_routeguide.RouteNote'(Prev, New, TrUserData);
      'routeguide.RouteSummary' ->
	  'merge_msg_routeguide.RouteSummary'(Prev, New,
					      TrUserData);
      'routeguide.Rectangle' ->
	  'merge_msg_routeguide.Rectangle'(Prev, New, TrUserData)
    end.

'merge_msg_routeguide.Point'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{latitude := NFlatitude}} ->
	       S1#{latitude => NFlatitude};
	   {#{latitude := PFlatitude}, _} ->
	       S1#{latitude => PFlatitude};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{longitude := NFlongitude}} ->
	  S2#{longitude => NFlongitude};
      {#{longitude := PFlongitude}, _} ->
	  S2#{longitude => PFlongitude};
      _ -> S2
    end.

'merge_msg_routeguide.Feature'(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{location := PFlocation},
       #{location := NFlocation}} ->
	  S2#{location =>
		  'merge_msg_routeguide.Point'(PFlocation, NFlocation,
					       TrUserData)};
      {_, #{location := NFlocation}} ->
	  S2#{location => NFlocation};
      {#{location := PFlocation}, _} ->
	  S2#{location => PFlocation};
      {_, _} -> S2
    end.

'merge_msg_routeguide.RouteNote'(PMsg, NMsg,
				 TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{location := PFlocation},
	    #{location := NFlocation}} ->
	       S1#{location =>
		       'merge_msg_routeguide.Point'(PFlocation, NFlocation,
						    TrUserData)};
	   {_, #{location := NFlocation}} ->
	       S1#{location => NFlocation};
	   {#{location := PFlocation}, _} ->
	       S1#{location => PFlocation};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{message := NFmessage}} ->
	  S2#{message => NFmessage};
      {#{message := PFmessage}, _} ->
	  S2#{message => PFmessage};
      _ -> S2
    end.

'merge_msg_routeguide.RouteSummary'(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{point_count := NFpoint_count}} ->
	       S1#{point_count => NFpoint_count};
	   {#{point_count := PFpoint_count}, _} ->
	       S1#{point_count => PFpoint_count};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{feature_count := NFfeature_count}} ->
	       S2#{feature_count => NFfeature_count};
	   {#{feature_count := PFfeature_count}, _} ->
	       S2#{feature_count => PFfeature_count};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{distance := NFdistance}} ->
	       S3#{distance => NFdistance};
	   {#{distance := PFdistance}, _} ->
	       S3#{distance => PFdistance};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{elapsed_time := NFelapsed_time}} ->
	  S4#{elapsed_time => NFelapsed_time};
      {#{elapsed_time := PFelapsed_time}, _} ->
	  S4#{elapsed_time => PFelapsed_time};
      _ -> S4
    end.

'merge_msg_routeguide.Rectangle'(PMsg, NMsg,
				 TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{lo := PFlo}, #{lo := NFlo}} ->
	       S1#{lo =>
		       'merge_msg_routeguide.Point'(PFlo, NFlo, TrUserData)};
	   {_, #{lo := NFlo}} -> S1#{lo => NFlo};
	   {#{lo := PFlo}, _} -> S1#{lo => PFlo};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{hi := PFhi}, #{hi := NFhi}} ->
	  S2#{hi =>
		  'merge_msg_routeguide.Point'(PFhi, NFhi, TrUserData)};
      {_, #{hi := NFhi}} -> S2#{hi => NFhi};
      {#{hi := PFhi}, _} -> S2#{hi => PFhi};
      {_, _} -> S2
    end.


verify_msg(Msg, MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'routeguide.Point' ->
	  'v_msg_routeguide.Point'(Msg, ['routeguide.Point'],
				   TrUserData);
      'routeguide.Feature' ->
	  'v_msg_routeguide.Feature'(Msg, ['routeguide.Feature'],
				     TrUserData);
      'routeguide.RouteNote' ->
	  'v_msg_routeguide.RouteNote'(Msg,
				       ['routeguide.RouteNote'], TrUserData);
      'routeguide.RouteSummary' ->
	  'v_msg_routeguide.RouteSummary'(Msg,
					  ['routeguide.RouteSummary'],
					  TrUserData);
      'routeguide.Rectangle' ->
	  'v_msg_routeguide.Rectangle'(Msg,
				       ['routeguide.Rectangle'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,'v_msg_routeguide.Point'/3}).
'v_msg_routeguide.Point'(#{} = M, Path, _) ->
    case M of
      #{latitude := F1} ->
	  v_type_int32(F1, [latitude | Path]);
      _ -> ok
    end,
    case M of
      #{longitude := F2} ->
	  v_type_int32(F2, [longitude | Path]);
      _ -> ok
    end,
    lists:foreach(fun (latitude) -> ok;
		      (longitude) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_routeguide.Point'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'routeguide.Point'},
		  M, Path);
'v_msg_routeguide.Point'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'routeguide.Point'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_routeguide.Feature'/3}).
'v_msg_routeguide.Feature'(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} -> v_type_string(F1, [name | Path]);
      _ -> ok
    end,
    case M of
      #{location := F2} ->
	  'v_msg_routeguide.Point'(F2, [location | Path],
				   TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (location) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_routeguide.Feature'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'routeguide.Feature'},
		  M, Path);
'v_msg_routeguide.Feature'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'routeguide.Feature'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_routeguide.RouteNote'/3}).
'v_msg_routeguide.RouteNote'(#{} = M, Path,
			     TrUserData) ->
    case M of
      #{location := F1} ->
	  'v_msg_routeguide.Point'(F1, [location | Path],
				   TrUserData);
      _ -> ok
    end,
    case M of
      #{message := F2} -> v_type_string(F2, [message | Path]);
      _ -> ok
    end,
    lists:foreach(fun (location) -> ok;
		      (message) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_routeguide.RouteNote'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'routeguide.RouteNote'},
		  M, Path);
'v_msg_routeguide.RouteNote'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'routeguide.RouteNote'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_routeguide.RouteSummary'/3}).
'v_msg_routeguide.RouteSummary'(#{} = M, Path, _) ->
    case M of
      #{point_count := F1} ->
	  v_type_int32(F1, [point_count | Path]);
      _ -> ok
    end,
    case M of
      #{feature_count := F2} ->
	  v_type_int32(F2, [feature_count | Path]);
      _ -> ok
    end,
    case M of
      #{distance := F3} ->
	  v_type_int32(F3, [distance | Path]);
      _ -> ok
    end,
    case M of
      #{elapsed_time := F4} ->
	  v_type_int32(F4, [elapsed_time | Path]);
      _ -> ok
    end,
    lists:foreach(fun (point_count) -> ok;
		      (feature_count) -> ok;
		      (distance) -> ok;
		      (elapsed_time) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_routeguide.RouteSummary'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'routeguide.RouteSummary'},
		  M, Path);
'v_msg_routeguide.RouteSummary'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'routeguide.RouteSummary'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_routeguide.Rectangle'/3}).
'v_msg_routeguide.Rectangle'(#{} = M, Path,
			     TrUserData) ->
    case M of
      #{lo := F1} ->
	  'v_msg_routeguide.Point'(F1, [lo | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{hi := F2} ->
	  'v_msg_routeguide.Point'(F2, [hi | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (lo) -> ok;
		      (hi) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_routeguide.Rectangle'(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'routeguide.Rectangle'},
		  M, Path);
'v_msg_routeguide.Rectangle'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'routeguide.Rectangle'}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.


get_msg_defs() ->
    [{{msg, 'routeguide.Point'},
      [#{name => latitude, fnum => 1, rnum => 2,
	 type => int32, occurrence => optional, opts => []},
       #{name => longitude, fnum => 2, rnum => 3,
	 type => int32, occurrence => optional, opts => []}]},
     {{msg, 'routeguide.Feature'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => location, fnum => 2, rnum => 3,
	 type => {msg, 'routeguide.Point'},
	 occurrence => optional, opts => []}]},
     {{msg, 'routeguide.RouteNote'},
      [#{name => location, fnum => 1, rnum => 2,
	 type => {msg, 'routeguide.Point'},
	 occurrence => optional, opts => []},
       #{name => message, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'routeguide.RouteSummary'},
      [#{name => point_count, fnum => 1, rnum => 2,
	 type => int32, occurrence => optional, opts => []},
       #{name => feature_count, fnum => 2, rnum => 3,
	 type => int32, occurrence => optional, opts => []},
       #{name => distance, fnum => 3, rnum => 4, type => int32,
	 occurrence => optional, opts => []},
       #{name => elapsed_time, fnum => 4, rnum => 5,
	 type => int32, occurrence => optional, opts => []}]},
     {{msg, 'routeguide.Rectangle'},
      [#{name => lo, fnum => 1, rnum => 2,
	 type => {msg, 'routeguide.Point'},
	 occurrence => optional, opts => []},
       #{name => hi, fnum => 2, rnum => 3,
	 type => {msg, 'routeguide.Point'},
	 occurrence => optional, opts => []}]}].


get_msg_names() ->
    ['routeguide.Point', 'routeguide.Feature',
     'routeguide.RouteNote', 'routeguide.RouteSummary',
     'routeguide.Rectangle'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['routeguide.Point', 'routeguide.Feature',
     'routeguide.RouteNote', 'routeguide.RouteSummary',
     'routeguide.Rectangle'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('routeguide.Point') ->
    [#{name => latitude, fnum => 1, rnum => 2,
       type => int32, occurrence => optional, opts => []},
     #{name => longitude, fnum => 2, rnum => 3,
       type => int32, occurrence => optional, opts => []}];
find_msg_def('routeguide.Feature') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => location, fnum => 2, rnum => 3,
       type => {msg, 'routeguide.Point'},
       occurrence => optional, opts => []}];
find_msg_def('routeguide.RouteNote') ->
    [#{name => location, fnum => 1, rnum => 2,
       type => {msg, 'routeguide.Point'},
       occurrence => optional, opts => []},
     #{name => message, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('routeguide.RouteSummary') ->
    [#{name => point_count, fnum => 1, rnum => 2,
       type => int32, occurrence => optional, opts => []},
     #{name => feature_count, fnum => 2, rnum => 3,
       type => int32, occurrence => optional, opts => []},
     #{name => distance, fnum => 3, rnum => 4, type => int32,
       occurrence => optional, opts => []},
     #{name => elapsed_time, fnum => 4, rnum => 5,
       type => int32, occurrence => optional, opts => []}];
find_msg_def('routeguide.Rectangle') ->
    [#{name => lo, fnum => 1, rnum => 2,
       type => {msg, 'routeguide.Point'},
       occurrence => optional, opts => []},
     #{name => hi, fnum => 2, rnum => 3,
       type => {msg, 'routeguide.Point'},
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['routeguide.RouteGuide'].


get_service_def('routeguide.RouteGuide') ->
    {{service, 'routeguide.RouteGuide'},
     [#{name => 'GetFeature', input => 'routeguide.Point',
	output => 'routeguide.Feature', input_stream => false,
	output_stream => false, opts => []},
      #{name => 'ListFeatures',
	input => 'routeguide.Rectangle',
	output => 'routeguide.Feature', input_stream => false,
	output_stream => true, opts => []},
      #{name => 'RecordRoute', input => 'routeguide.Point',
	output => 'routeguide.RouteSummary',
	input_stream => true, output_stream => false,
	opts => []},
      #{name => 'RouteChat', input => 'routeguide.RouteNote',
	output => 'routeguide.RouteNote', input_stream => true,
	output_stream => true, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('routeguide.RouteGuide') ->
    ['GetFeature', 'ListFeatures', 'RecordRoute',
     'RouteChat'];
get_rpc_names(_) -> error.


find_rpc_def('routeguide.RouteGuide', RpcName) ->
    'find_rpc_def_routeguide.RouteGuide'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_routeguide.RouteGuide'('GetFeature') ->
    #{name => 'GetFeature', input => 'routeguide.Point',
      output => 'routeguide.Feature', input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_routeguide.RouteGuide'('ListFeatures') ->
    #{name => 'ListFeatures',
      input => 'routeguide.Rectangle',
      output => 'routeguide.Feature', input_stream => false,
      output_stream => true, opts => []};
'find_rpc_def_routeguide.RouteGuide'('RecordRoute') ->
    #{name => 'RecordRoute', input => 'routeguide.Point',
      output => 'routeguide.RouteSummary',
      input_stream => true, output_stream => false,
      opts => []};
'find_rpc_def_routeguide.RouteGuide'('RouteChat') ->
    #{name => 'RouteChat', input => 'routeguide.RouteNote',
      output => 'routeguide.RouteNote', input_stream => true,
      output_stream => true, opts => []};
'find_rpc_def_routeguide.RouteGuide'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


get_package_name() -> routeguide.



gpb_version_as_string() ->
    "4.0.2".

gpb_version_as_list() ->
    [4,0,2].
